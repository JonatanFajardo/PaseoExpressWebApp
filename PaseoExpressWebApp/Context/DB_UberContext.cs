// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace PaseoExpressWebApp.Context
{
    public partial class DB_UberContext : DbContext
    {
        public DB_UberContext()
        {
        }

        public DB_UberContext(DbContextOptions<DB_UberContext> options)
            : base(options)
        {
        }

        public virtual DbSet<tbDetail> tbDetail { get; set; }
        public virtual DbSet<tbHistorialMantenimiento> tbHistorialMantenimiento { get; set; }
        public virtual DbSet<tbMessage> tbMessage { get; set; }
        public virtual DbSet<tbRol> tbRol { get; set; }
        public virtual DbSet<tbServicios> tbServicios { get; set; }
        public virtual DbSet<tbTipoMantenimientos> tbTipoMantenimientos { get; set; }
        public virtual DbSet<tbTipoServicios> tbTipoServicios { get; set; }
        public virtual DbSet<tbTipoTransaccion> tbTipoTransaccion { get; set; }
        public virtual DbSet<tbTransacciones> tbTransacciones { get; set; }
        public virtual DbSet<tbUbicacionEnAutomovil> tbUbicacionEnAutomovil { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }
        public virtual DbSet<tbVehiculo> tbVehiculo { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-I0I12OB;Initial Catalog=DB_Uber;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<tbDetail>(entity =>
            {
                entity.HasKey(e => e.IdDetail);

                entity.ToTable("tbDetail", "chat");

                entity.HasComment("Almacena los detalles de los mensajes entre usuarios o grupos, incluyendo remitente, destinatario, fecha, mensaje y estado de lectura.\n\n");

                entity.Property(e => e.IdDetail).HasComment("Identificador único del detalle del mensaje.\n");

                entity.Property(e => e.GroupId).HasComment("Identificador del grupo (si aplica) al que pertenece el mensaje.\n");

                entity.Property(e => e.IdMessage).HasComment("Identificador del mensaje al que pertenece este detalle.\n");

                entity.Property(e => e.IsRead).HasComment("Indica si el mensaje ha sido leído (1) o no (0).");

                entity.Property(e => e.ReceiverId).HasComment("Identificador del destinatario del mensaje.\n");

                entity.Property(e => e.SenderId).HasComment("Identificador del remitente del mensaje.\n");

                entity.Property(e => e.Timestamp)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Fecha y hora del mensaje.\n");

                entity.HasOne(d => d.IdMessageNavigation)
                    .WithMany(p => p.tbDetail)
                    .HasForeignKey(d => d.IdMessage)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbDetail_tbMessage");

                entity.HasOne(d => d.Receiver)
                    .WithMany(p => p.tbDetailReceiver)
                    .HasForeignKey(d => d.ReceiverId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbDetail_tbUsuarios1");

                entity.HasOne(d => d.Sender)
                    .WithMany(p => p.tbDetailSender)
                    .HasForeignKey(d => d.SenderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbDetail_tbUsuarios");
            });

            modelBuilder.Entity<tbHistorialMantenimiento>(entity =>
            {
                entity.HasKey(e => e.IdMantenimiento)
                    .HasName("PK__Historia__DD1C4417FAD86A75");

                entity.HasComment("Registra el historial de mantenimiento de los vehículos, incluyendo fecha, tipo de mantenimiento, vehículo, kilometraje y costo.\n\n");

                entity.Property(e => e.CostoManoObra)
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostoTotal)
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostoUnitario)
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DescripcionMantenimiento).HasColumnType("text");

                entity.Property(e => e.FechaMantenimiento).HasColumnType("date");

                entity.Property(e => e.MiMano).HasDefaultValueSql("((0))");

                entity.Property(e => e.ProximaFechaMantenimiento).HasColumnType("date");
            });

            modelBuilder.Entity<tbMessage>(entity =>
            {
                entity.HasKey(e => e.IdMessage);

                entity.ToTable("tbMessage", "chat");

                entity.HasComment("almacena los mensajes enviados en el sistema.");

                entity.Property(e => e.IdMessage).HasComment("Identificador único del mensaje.\n");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(650)
                    .HasComment("Descripción o contenido del mensaje.\n");

                entity.Property(e => e.IsRead).HasComment("Indica si el mensaje ha sido leído (1) o no (0).\n");

                entity.Property(e => e.Time)
                    .HasColumnType("datetime")
                    .HasComment("Fecha y hora del mensaje.");
            });

            modelBuilder.Entity<tbRol>(entity =>
            {
                entity.HasKey(e => e.IdRol);

                entity.ToTable("tbRol", "seguridad");

                entity.HasComment("Define los roles de usuario en el sistema (ej: \"Administrador\", \"Usuario\"), cada uno con un identificador y nombre.\n\n");

                entity.Property(e => e.Nombre).HasMaxLength(530);
            });

            modelBuilder.Entity<tbServicios>(entity =>
            {
                entity.HasKey(e => e.IdServicios)
                    .HasName("PK_tbServicio");

                entity.HasComment("Registra los servicios realizados a los vehículos.");

                entity.Property(e => e.IdServicios).HasComment("Identificador único del servicio.\n");

                entity.Property(e => e.Confirmado).HasComment("Indica si el servicio ha sido confirmado (1) o no (0).\n");

                entity.Property(e => e.CostoTotal)
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((0))")
                    .HasComment("Costo total del servicio.\n");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(550)
                    .HasComment("Descripción detallada del servicio.\n");

                entity.Property(e => e.EsRecurrente).HasComment("Indica si el servicio es recurrente (1) o no (0).\n");

                entity.Property(e => e.FechaServicio)
                    .HasColumnType("date")
                    .HasComment("Fecha en que se realizó el servicio.\n");

                entity.Property(e => e.IdTipoMantenimiento).HasComment("Identificador del tipo de mantenimiento.\n");

                entity.Property(e => e.IdTipoServicio).HasComment("Identificador del tipo de servicio.\n");

                entity.Property(e => e.IdUbicacionEnAutomovil)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Identificador de la ubicación en el automóvil.");

                entity.Property(e => e.IdVehiculo).HasComment("Identificador del vehículo al que se le realizó el servicio.\n");

                entity.Property(e => e.Imagenes)
                    .HasMaxLength(4000)
                    .HasComment("Rutas de las imágenes relacionadas con el servicio.\n");

                entity.Property(e => e.ManoObraPersonal)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Cantidad monetaria involucrada en la mano de obra.");

                entity.Property(e => e.Marca)
                    .HasMaxLength(250)
                    .HasComment("Marca del vehículo al que se le realizó el servicio.\n");

                entity.Property(e => e.MillajeVehiculo).HasComment("Millaje del vehículo al momento del servicio.\n");

                entity.Property(e => e.PrecioManoObra)
                    .HasColumnType("decimal(10, 2)")
                    .HasComment("Precio de la mano de obra para el servicio.\n");

                entity.Property(e => e.ProximaFechaMantenimiento)
                    .HasColumnType("date")
                    .HasComment("Fecha recomendada para el próximo mantenimiento.\n");

                entity.Property(e => e.ProximoMillaje).HasComment("Millaje recomendado para el próximo servicio.\n");

                entity.Property(e => e.Titulo)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasComment("Título o encabezado del servicio.\n");

                entity.Property(e => e.Viaticos)
                    .HasMaxLength(250)
                    .HasComment("Viáticos relacionados con el servicio.\n");

                entity.HasOne(d => d.IdTipoMantenimientoNavigation)
                    .WithMany(p => p.tbServicios)
                    .HasForeignKey(d => d.IdTipoMantenimiento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbServicios_tbTipoMantenimientos");

                entity.HasOne(d => d.IdTipoServicioNavigation)
                    .WithMany(p => p.tbServicios)
                    .HasForeignKey(d => d.IdTipoServicio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbServicios_tbTipoServicio");

                entity.HasOne(d => d.IdVehiculoNavigation)
                    .WithMany(p => p.tbServicios)
                    .HasForeignKey(d => d.IdVehiculo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbServicios_tbInformacionVehiculo");

                entity.HasMany(d => d.IdTransaccion)
                    .WithMany(p => p.IdServicios)
                    .UsingEntity<Dictionary<string, object>>(
                        "tbServicios_tbTransacciones",
                        l => l.HasOne<tbTransacciones>().WithMany().HasForeignKey("IdTransaccion").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__tbTipoSer__IdTra__778AC167"),
                        r => r.HasOne<tbServicios>().WithMany().HasForeignKey("IdServicios").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__tbTipoSer__IdSer__76969D2E"),
                        j =>
                        {
                            j.HasKey("IdServicios", "IdTransaccion").HasName("PK__tbTipoSe__6227C36EF04CEBE3");

                            j.ToTable("tbServicios_tbTransacciones").HasComment("Relaciona los servicios realizados con las transacciones en las que se incluyeron.\n\n");

                            j.IndexerProperty<int>("IdServicios").HasComment("Identificador único del servicio.\n");

                            j.IndexerProperty<int>("IdTransaccion").HasComment("Identificador de la transacción relacionada con el servicio.");
                        });
            });

            modelBuilder.Entity<tbTipoMantenimientos>(entity =>
            {
                entity.HasKey(e => e.IdTipoMantenimiento)
                    .HasName("PK_tbTipoMantenimiento");

                entity.HasComment("Contiene los diferentes tipos de mantenimiento vehicular.");

                entity.Property(e => e.IdTipoMantenimiento).HasComment("Identificador único del tipo de mantenimiento.\n");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(350)
                    .HasComment("Nombre o descripción del tipo de mantenimiento.");
            });

            modelBuilder.Entity<tbTipoServicios>(entity =>
            {
                entity.HasKey(e => e.IdTipoServicio)
                    .HasName("PK_tbTipoServicio");

                entity.HasComment("Contiene los diferentes tipos de servicios vehiculares.");

                entity.Property(e => e.IdTipoServicio).HasComment("Identificador único del tipo de servicio.\n");

                entity.Property(e => e.KilometrajeCambioRecomendado)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Kilometraje recomendado para realizar el servicio.\n");

                entity.Property(e => e.Meses)
                    .HasColumnType("decimal(10, 2)")
                    .HasComment("Intervalo en meses recomendado para realizar el servicio.");

                entity.Property(e => e.MillajeCambioRecomendado)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Millaje recomendado para realizar el servicio.\n");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(350)
                    .HasComment("Nombre o descripción del tipo de servicio.\n");
            });

            modelBuilder.Entity<tbTipoTransaccion>(entity =>
            {
                entity.HasKey(e => e.IdTipoTransaccion);

                entity.HasComment("Contiene los diferentes tipos de transacciones registradas en el sistema.");

                entity.Property(e => e.IdTipoTransaccion).HasComment("Identificador único del tipo de transacción.\n");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasComment("Nombre o descripción del tipo de transacción.");
            });

            modelBuilder.Entity<tbTransacciones>(entity =>
            {
                entity.HasKey(e => e.IdTransaccion)
                    .HasName("PK_tbTransaccion");

                entity.HasComment("Registra las transacciones realizadas en cuotas diarias y servicios.");

                entity.Property(e => e.IdTransaccion).HasComment("Identificador único de la transacción.\n");

                entity.Property(e => e.Comentario)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasComment("Comentario o notas sobre la transacción.\n");

                entity.Property(e => e.Confirmada).HasComment("Indica si la transacción ha sido confirmada (1) o no (0).\n");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("date")
                    .HasComment("Fecha de creación del registro de la transacción.");

                entity.Property(e => e.FechaTransaccion)
                    .HasColumnType("date")
                    .HasComment("Fecha de inicio de la transacción.\n");

                entity.Property(e => e.FechaTransaccionHasta)
                    .HasColumnType("date")
                    .HasComment("Fecha de fin de la transacción.\n");

                entity.Property(e => e.IdTipoTransaccion).HasComment("Identificador del tipo de transacción.\n");

                entity.Property(e => e.IdUsuario).HasComment("Identificador del usuario que realizó la transacción.\n");

                entity.Property(e => e.IdVehiculo).HasComment("Identificador del vehículo relacionado con la transacción.\n");

                entity.Property(e => e.Imagen)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasComment("Ruta de la imagen relacionada con la transacción.\n");

                entity.Property(e => e.TarifaAhorro).HasComment("Tarifa con descuento aplicada en la transacción.\n");

                entity.Property(e => e.TarifaDiaria).HasComment("Tarifa diaria aplicada en la transacción.\n");

                entity.Property(e => e.UltimaSuma)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Última suma o total relacionado con la transacción.\n");
            });

            modelBuilder.Entity<tbUbicacionEnAutomovil>(entity =>
            {
                entity.HasKey(e => e.IdUbicacionEnAutomovil);

                entity.HasComment("Contiene las diferentes ubicaciones dentro de un automóvil para identificar donde se encuentran las piezas.");

                entity.Property(e => e.IdUbicacionEnAutomovil).HasComment("Identificador único de la ubicación en el automóvil.\n");

                entity.Property(e => e.Ubicacion)
                    .HasMaxLength(250)
                    .HasComment("Descripción de la ubicación en el automóvil.");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.IdUsuario);

                entity.ToTable("tbUsuarios", "seguridad");

                entity.HasComment("Almacena la información de los usuarios del sistema, incluyendo datos personales y de acceso.");

                entity.Property(e => e.Ciudad).HasMaxLength(50);

                entity.Property(e => e.Correo)
                    .HasMaxLength(450)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(350)
                    .IsUnicode(false);

                entity.Property(e => e.EstaActivo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Identidad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Imagen)
                    .IsRequired()
                    .HasMaxLength(650)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre).HasMaxLength(350);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.Property(e => e.TagMensajeria)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(350);

                entity.HasOne(d => d.IdRolNavigation)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.IdRol)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbUsuarios_tbRol");
            });

            modelBuilder.Entity<tbVehiculo>(entity =>
            {
                entity.HasKey(e => e.IdVehiculo)
                    .HasName("PK__VehicleI__64D74CC8A61356E4");

                entity.HasComment("Almacena la información de los vehículos.");

                entity.Property(e => e.IdVehiculo).HasComment("Identificador único del vehículo.\n");

                entity.Property(e => e.Anio).HasComment("Año de fabricación del vehículo.\n");

                entity.Property(e => e.Color)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("Color del vehículo.\n");

                entity.Property(e => e.IdConductor).HasComment("Identificador del conductor del vehículo.\n");

                entity.Property(e => e.IdPropietario).HasComment("Identificador del propietario del vehículo.\n");

                entity.Property(e => e.Imagen)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasComment("Ruta de la imagen del vehículo.\n\nExportar a Hojas de cálculo\n");

                entity.Property(e => e.Inhabilitado)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Indica si el vehículo está inhabilitado (1) o no (0).\n");

                entity.Property(e => e.Kilometraje).HasComment("Kilometraje total del vehículo.\n");

                entity.Property(e => e.Marca)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Marca del vehículo.\n");

                entity.Property(e => e.Millaje).HasComment("Millaje total del vehículo.\n");

                entity.Property(e => e.MillajeActual).HasComment("Millaje actual del vehículo.\n");

                entity.Property(e => e.Modelo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Modelo del vehículo.\n");

                entity.Property(e => e.Placa)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Número de placa del vehículo.\n");

                entity.Property(e => e.TarifaAhorro).HasComment("Tarifa de alquiler con descuento.\n");

                entity.Property(e => e.TarifaDiaria).HasComment("Tarifa diaria de alquiler del vehículo.\n");

                entity.Property(e => e.TipoAceite)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Tipo de aceite recomendado para el vehículo.\n");

                entity.Property(e => e.VIN)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasComment("Número de identificación del vehículo (VIN).\n");

                entity.HasOne(d => d.IdConductorNavigation)
                    .WithMany(p => p.tbVehiculo)
                    .HasForeignKey(d => d.IdConductor)
                    .HasConstraintName("FK_tbVehiculo_tbUsuarios");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}