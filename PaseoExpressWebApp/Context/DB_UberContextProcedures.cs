// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using PaseoExpressWebApp.Context;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace PaseoExpressWebApp.Context
{
    public partial class DB_UberContext
    {
        private IDB_UberContextProcedures _procedures;

        public virtual IDB_UberContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DB_UberContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDB_UberContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PR_Chat_ObtenerMensajesUsuarioResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_Chat_ObtenerUltimoMensajePorUsuarioResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_InsertMessageWithDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_ObtenerServiciosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_ObtenerServiciosPorVehiculoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_ObtenerServiciosProximoCambioResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_ObtenerTransaccionesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_ObtenerTransaccionesPorVehiculoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_ObtenerVehiculoInformacionDashboardResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_ObtenerVehiculosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_ObtenerVehiculosSinExistenciaHoyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_ResumenTotalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PR_VerificandoUsuarioResult>().HasNoKey().ToView(null);
        }
    }

    public partial class DB_UberContextProcedures : IDB_UberContextProcedures
    {
        private readonly DB_UberContext _context;

        public DB_UberContextProcedures(DB_UberContext context)
        {
            _context = context;
        }

        public virtual async Task<List<PR_Chat_ObtenerMensajesUsuarioResult>> PR_Chat_ObtenerMensajesUsuarioAsync(int? IdUsuarioOne, int? IdUsuariotwo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdUsuarioOne",
                    Value = IdUsuarioOne ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdUsuariotwo",
                    Value = IdUsuariotwo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_Chat_ObtenerMensajesUsuarioResult>("EXEC @returnValue = [dbo].[PR_Chat_ObtenerMensajesUsuario] @IdUsuarioOne = @IdUsuarioOne, @IdUsuariotwo = @IdUsuariotwo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_Chat_ObtenerUltimoMensajePorUsuarioResult>> PR_Chat_ObtenerUltimoMensajePorUsuarioAsync(int? UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_Chat_ObtenerUltimoMensajePorUsuarioResult>("EXEC @returnValue = [dbo].[PR_Chat_ObtenerUltimoMensajePorUsuario] @UserId = @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PR_CierreDiarioAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PR_CierreDiario]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PR_ConfirmarTransaccionAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PR_ConfirmarTransaccion]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PR_InsertarDatosTransaccionAsync(string Imagen, int? TarifaDiaria, int? TarifaAhorro, int? IdVehiculo, int? IdUsuario, int? UltimaSuma, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Imagen",
                    Size = 4000,
                    Value = Imagen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TarifaDiaria",
                    Value = TarifaDiaria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TarifaAhorro",
                    Value = TarifaAhorro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdVehiculo",
                    Value = IdVehiculo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdUsuario",
                    Value = IdUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UltimaSuma",
                    Value = UltimaSuma ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PR_InsertarDatosTransaccion] @Imagen = @Imagen, @TarifaDiaria = @TarifaDiaria, @TarifaAhorro = @TarifaAhorro, @IdVehiculo = @IdVehiculo, @IdUsuario = @IdUsuario, @UltimaSuma = @UltimaSuma", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PR_InsertarUnServiciosAsync(int? IdTipoServicio, string Imagenes, string Titulo, string Descripcion, DateTime? FechaServicio, decimal? CostoTotal, string Marca, int? IdTipoMantenimiento, int? MillajeVehiculo, DateTime? ProximaFechaMantenimiento, int? IdVehiculo, int? IdUsuario, bool? EsRecurrente, long? ProximoMillaje, int? IdUbicacionEnAutomovil, decimal? PrecioManoObra, bool? Confirmado, string Viaticos, int? ManoObraPersonal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdTipoServicio",
                    Value = IdTipoServicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Imagenes",
                    Size = 8000,
                    Value = Imagenes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Titulo",
                    Size = 500,
                    Value = Titulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 1100,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaServicio",
                    Value = FechaServicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "CostoTotal",
                    Precision = 10,
                    Scale = 2,
                    Value = CostoTotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Marca",
                    Size = 500,
                    Value = Marca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoMantenimiento",
                    Value = IdTipoMantenimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MillajeVehiculo",
                    Value = MillajeVehiculo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProximaFechaMantenimiento",
                    Value = ProximaFechaMantenimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IdVehiculo",
                    Value = IdVehiculo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdUsuario",
                    Value = IdUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EsRecurrente",
                    Value = EsRecurrente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ProximoMillaje",
                    Value = ProximoMillaje ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdUbicacionEnAutomovil",
                    Value = IdUbicacionEnAutomovil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PrecioManoObra",
                    Precision = 10,
                    Scale = 2,
                    Value = PrecioManoObra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Confirmado",
                    Value = Confirmado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Viaticos",
                    Size = 500,
                    Value = Viaticos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ManoObraPersonal",
                    Value = ManoObraPersonal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PR_InsertarUnServicios] @IdTipoServicio = @IdTipoServicio, @Imagenes = @Imagenes, @Titulo = @Titulo, @Descripcion = @Descripcion, @FechaServicio = @FechaServicio, @CostoTotal = @CostoTotal, @Marca = @Marca, @IdTipoMantenimiento = @IdTipoMantenimiento, @MillajeVehiculo = @MillajeVehiculo, @ProximaFechaMantenimiento = @ProximaFechaMantenimiento, @IdVehiculo = @IdVehiculo, @IdUsuario = @IdUsuario, @EsRecurrente = @EsRecurrente, @ProximoMillaje = @ProximoMillaje, @IdUbicacionEnAutomovil = @IdUbicacionEnAutomovil, @PrecioManoObra = @PrecioManoObra, @Confirmado = @Confirmado, @Viaticos = @Viaticos, @ManoObraPersonal = @ManoObraPersonal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_InsertMessageWithDetailResult>> PR_InsertMessageWithDetailAsync(string Description, bool? IsRead, int? SenderId, int? ReceiverId, int? GroupId, DateTime? Time, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 1300,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsRead",
                    Value = IsRead ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "SenderId",
                    Value = SenderId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReceiverId",
                    Value = ReceiverId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "GroupId",
                    Value = GroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Time",
                    Value = Time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_InsertMessageWithDetailResult>("EXEC @returnValue = [dbo].[PR_InsertMessageWithDetail] @Description = @Description, @IsRead = @IsRead, @SenderId = @SenderId, @ReceiverId = @ReceiverId, @GroupId = @GroupId, @Time = @Time", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_ObtenerServiciosResult>> PR_ObtenerServiciosAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_ObtenerServiciosResult>("EXEC @returnValue = [dbo].[PR_ObtenerServicios]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_ObtenerServiciosPorVehiculoResult>> PR_ObtenerServiciosPorVehiculoAsync(int? IdVehiculo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdVehiculo",
                    Value = IdVehiculo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_ObtenerServiciosPorVehiculoResult>("EXEC @returnValue = [dbo].[PR_ObtenerServiciosPorVehiculo] @IdVehiculo = @IdVehiculo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_ObtenerServiciosProximoCambioResult>> PR_ObtenerServiciosProximoCambioAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_ObtenerServiciosProximoCambioResult>("EXEC @returnValue = [dbo].[PR_ObtenerServiciosProximoCambio]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_ObtenerTransaccionesResult>> PR_ObtenerTransaccionesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_ObtenerTransaccionesResult>("EXEC @returnValue = [dbo].[PR_ObtenerTransacciones]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_ObtenerTransaccionesPorVehiculoResult>> PR_ObtenerTransaccionesPorVehiculoAsync(int? IdVehiculo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdVehiculo",
                    Value = IdVehiculo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_ObtenerTransaccionesPorVehiculoResult>("EXEC @returnValue = [dbo].[PR_ObtenerTransaccionesPorVehiculo] @IdVehiculo = @IdVehiculo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_ObtenerVehiculoInformacionDashboardResult>> PR_ObtenerVehiculoInformacionDashboardAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_ObtenerVehiculoInformacionDashboardResult>("EXEC @returnValue = [dbo].[PR_ObtenerVehiculoInformacionDashboard]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_ObtenerVehiculosResult>> PR_ObtenerVehiculosAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_ObtenerVehiculosResult>("EXEC @returnValue = [dbo].[PR_ObtenerVehiculos]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_ObtenerVehiculosSinExistenciaHoyResult>> PR_ObtenerVehiculosSinExistenciaHoyAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_ObtenerVehiculosSinExistenciaHoyResult>("EXEC @returnValue = [dbo].[PR_ObtenerVehiculosSinExistenciaHoy]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_ResumenTotalResult>> PR_ResumenTotalAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_ResumenTotalResult>("EXEC @returnValue = [dbo].[PR_ResumenTotal]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PR_TransaccionTarifaNoPagadaAsync(int? IdVehiculo, DateTime? FechaTransaccion, DateTime? FechaTransaccionHasta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdVehiculo",
                    Value = IdVehiculo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaTransaccion",
                    Value = FechaTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaTransaccionHasta",
                    Value = FechaTransaccionHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PR_TransaccionTarifaNoPagada] @IdVehiculo = @IdVehiculo, @FechaTransaccion = @FechaTransaccion, @FechaTransaccionHasta = @FechaTransaccionHasta", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PR_TransaccionTarifaNoPagadaNoConfirmadaAsync(int? IdVehiculo, DateTime? FechaTransaccion, DateTime? FechaTransaccionHasta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdVehiculo",
                    Value = IdVehiculo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaTransaccion",
                    Value = FechaTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaTransaccionHasta",
                    Value = FechaTransaccionHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PR_TransaccionTarifaNoPagadaNoConfirmada] @IdVehiculo = @IdVehiculo, @FechaTransaccion = @FechaTransaccion, @FechaTransaccionHasta = @FechaTransaccionHasta", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_VerificandoUsuarioResult>> PR_VerificandoUsuarioAsync(string usuario, string password, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "usuario",
                    Size = 100,
                    Value = usuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "password",
                    Size = 100,
                    Value = password ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_VerificandoUsuarioResult>("EXEC @returnValue = [dbo].[PR_VerificandoUsuario] @usuario = @usuario, @password = @password", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
