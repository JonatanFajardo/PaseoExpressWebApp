@page "/control-diario" 
@using PaseoExpressWebApp.Context;
@using PaseoExpressWebApp.Services;
@inject TransaccionesService transaccionesService
@inject comprobantediarioservice ComprobanteDiarioService

@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client;

@inject ISnackbar Snackbar

<PageTitle>Control diario</PageTitle>

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>

<MudTabs Elevation="0" Height="600px" Rounded="true" ApplyEffectsToContainer="true" PanelClass="" Style="padding:0 24;">
    <MudTabPanel Text="Pagos no confirmados">


            <div class="container pt-4">
                <div class="row">
                    <!-- Primera columna: Imagen -->
                <div class="@($"col-md-{(mostrarDetalles ? 4 : 8)}")">


                    @if (@mostrarDetalles is false)
                        {
                            <MudAlert Severity="Severity.Info">Seleccione un elemento de la lista para ver la información.</MudAlert>
                        }
                        <img src="@seleccion.Imagen" alt="Imagen" class="img-fluid" />
                    </div>
                    <!-- Segunda columna: Información -->
                    @if (@mostrarDetalles is true)
                        {
                        <div class="col-md-4">
                            <div>
                                 <AvatarContent>
                                    <MudAvatar>
                                    <MudImage Src="@seleccion.Imagen" />
                                    </MudAvatar>
                                </AvatarContent>
                                <h3>@seleccion.Placa</h3>
                                
                            </div>
 
                            <div>
                                <MudText Typo="Typo.h5">Detalles del Vehículo</MudText>
                                <MudText Typo="Typo.body1">ID: @seleccion.IdVehiculo</MudText>
                                <MudText Typo="Typo.body1">Año: @seleccion.Anio</MudText>
                                <MudText Typo="Typo.body1">Placa: @seleccion.Placa</MudText>
                                <MudText Typo="Typo.body1">Nombre: @seleccion.Nombre</MudText>
                                <MudText Typo="Typo.body1">Tarifa Diaria: @seleccion.TarifaDiaria</MudText>
                                <MudText Typo="Typo.body1">Tarifa Ahorro: @seleccion.TarifaAhorro</MudText>
                                <MudText Typo="Typo.body1">Fecha de Transacción: @seleccion.FechaTransaccion.ToString("dd/MM/yyyy")</MudText>
                                <MudText Typo="Typo.body1">Comentario: @seleccion.Comentario</MudText>
                                <MudText Typo="Typo.body1">ID Tipo de Transacción: @seleccion.IdTipoTransaccion</MudText>
                            </div>
                        
                       
                        </div>
                        }
                       

                    <!-- Tercera columna: Listado -->
                <div class="col-md-4 overflow-auto" style="max-height: 472px;">
                        <ul class="list-group">
                        @foreach (var item in _transacciones)
                            {
                                <li class="list-group-item" @onclick="() => SeleccionarInformacion(item)">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <AvatarContent>
                                                <MudAvatar>
                                                    <MudImage Src="@item.ImagenUsuario"/>
                                                </MudAvatar>
                                            </AvatarContent>

                                        </div>
                                    <div class="col-md-9 p-0">
                                            <h5>@item.Nombre</h5>
                                        <p class="m-0">@CalcularDiasPasados(@item.FechaCreacion)</p>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>


    </MudTabPanel>
    <MudTabPanel Text="Generar pago">
    
        @if (sinExistencia)
        {
            <MudAlert Severity="Severity.Info" class="mt-3">Nota: El pago de todos los vehiculos esta saldado.</MudAlert>
        }
        else
        {
            <div class="d-flex flex-row-reverse">
                <button class="btn bg-primario-oscuro m-3" @onclick="CierreDiarioAsync" data-toggle="tooltip" data-placement="bottom" title="Con esto indicas que los pagos en todos los vehiculos se han realizado.">Cierre Diario</button>
            </div>

            <MudContainer>
                <MudGrid>
                    @foreach (var vehiculo in vehiculosSinExistencia)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard>
                                <img src="/img/@vehiculo.Imagen"  class="img-fluid"/>

                                <MudCardContent>
                                    <MudText Typo="Typo.h5">Vehículo @vehiculo.IdVehiculo</MudText>
                                    <MudText Typo="Typo.body2">
                                        Año: @vehiculo.Anio<br />
                                        Placa: @vehiculo.Placa<br />
                                        Tarifa Diaria: @vehiculo.TarifaDiaria<br />
                                        Tarifa Ahorro: @vehiculo.TarifaAhorro<br />
                                    </MudText>

                                    <MudCheckBox @bind-Checked="mostrarFechaTransaccionHasta" Label="Mostrar Fecha de Transacción Hasta" data-toggle="tooltip" data-placement="bottom" title="Esto es útil cuando un conductor no ha echo un pago en varios dias." />

                                    @if (mostrarFechaTransaccionHasta)
                                    {
                                        <MudTextField @bind-Value="FechaTransaccion" Label="Fecha de Transacción" Type="date" />
                                        <MudTextField @bind-Value="FechaTransaccionHasta" Label="Fecha de Transacción Hasta" Type="date" />
                                    }
                                </MudCardContent>

                                <div class="p-2 text-center">
                                    <MudPaper Class="pa-4 bg-primario-oscuro" OnClick="() => EnviarIdVehiculo(vehiculo.IdVehiculo, FechaTransaccion, FechaTransaccionHasta)">
                                        Efectuar pago
                                    </MudPaper>
                                </div>

                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudContainer>


        }

    </MudTabPanel>
</MudTabs>


@code{
    List<ObtenerTransaccionesResult> _transacciones = new List<ObtenerTransaccionesResult>();
    private ObtenerTransaccionesResult seleccion = new ObtenerTransaccionesResult();
    private bool mostrarDetalles = false;

    DateTime FechaActual = DateTime.Now;
    DateTime FechaTransaccion = DateTime.Now;
    DateTime FechaTransaccionHasta = DateTime.Now;
    bool mostrarFechaTransaccionHasta = false;


    private List<ObtenerVehiculosSinExistenciaHoyResult> vehiculosSinExistencia;
    private List<ObtenerVehiculosResult> vehiculos;


    private HubConnection? hubConnection;
    bool sinExistencia;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
       .WithUrl(Navigation.ToAbsoluteUri("/YourHub"))
       .Build();

        seleccion.Imagen = "img/5861769.jpg";
        _transacciones = await transaccionesService.ObtenerTransaccionesNoConfirmadasAsync();


        vehiculosSinExistencia = await ComprobanteDiarioService.obtenervehiculossinexistenciahoy();

        sinExistencia= vehiculosSinExistencia.Count == 0 ? true: false;
        StartConnection();
        Obtenervehiculos(); 

    } 


    // Método para seleccionar la información
    private void SeleccionarInformacion(ObtenerTransaccionesResult info)
    {
        mostrarDetalles = true;
        seleccion = info;
    }


    // Método para calcular los días transcurridos
    private string CalcularDiasPasados(DateTime fecha)
    { 
        var diasPasados = (DateTime.Now - fecha).Days;
        return $"Hace {diasPasados} días";

    }

    private async Task CierreDiarioAsync()
    {
        await ComprobanteDiarioService.CierreDiarioAsync();
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("ActualizarTransaccion");
        }
        else
        {
            Console.WriteLine($"La conexión no está establecida. Estado actual: {hubConnection?.State}");
        }


        Snackbar.Add("Guardado correctamente", Severity.Normal, c => c.SnackbarVariant = Variant.Outlined);
        sinExistencia = true;
        Obtenervehiculos();

    }

    private async Task Obtenervehiculos()
    {
        vehiculos = await ComprobanteDiarioService.Obtenervehiculos();

    }

    private async Task StartConnection()
    {
        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al conectar: {ex.Message}");
        }
    }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Control Diario", href: null, disabled: true),
    };
}
