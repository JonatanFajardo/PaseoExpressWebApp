@page "/control-diario" 
@using PaseoExpressWebApp.Context;
@using PaseoExpressWebApp.Data;
@using PaseoExpressWebApp.Services;
@inject TransaccionesService transaccionesService

@inject comprobantediarioservice ComprobanteDiarioService

<MudTabs Elevation="0" Height="600px" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Pagos no confirmados">

        @*<MudGrid>*@


            <div class="container">
                <div class="row">
                    <!-- Primera columna: Imagen -->
                <div class="@($"col-md-{(mostrarDetalles ? 4 : 8)}")">


                    @if (@mostrarDetalles is false)
                        {
                            <MudAlert Severity="Severity.Info">Seleccione un elemento de la lista para ver la información.</MudAlert>
                        }
                        <img src="@seleccion.Imagen" alt="Imagen" class="img-fluid" />
                    </div>
                    <!-- Segunda columna: Información -->
                    @if (@mostrarDetalles is true)
                        {
                        <div class="col-md-4">
                            <div>
                                 <AvatarContent>
                                    <MudAvatar>
                                    <MudImage Image="seleccion.ImagenUsuario" />
                                    </MudAvatar>
                                </AvatarContent>
                                <h3>@seleccion.Placa</h3>
                                
                            </div>
 
                            <div>
                                <MudText Typo="Typo.h5">Detalles del Vehículo</MudText>
                            <MudText Typo="Typo.body1">ID: @seleccion.IdVehiculo</MudText>
                            <MudText Typo="Typo.body1">Año: @seleccion.Anio</MudText>
                                <MudText Typo="Typo.body1">Placa: @seleccion.Placa</MudText>
                            <MudText Typo="Typo.body1">Nombre: @seleccion.Nombre</MudText>
                                <MudText Typo="Typo.body1">Tarifa Diaria: @seleccion.TarifaDiaria</MudText>
                            <MudText Typo="Typo.body1">Tarifa Ahorro: @seleccion.TarifaAhorro</MudText>
                            <MudText Typo="Typo.body1">Fecha de Transacción: @seleccion.FechaTransaccion.ToString("dd/MM/yyyy")</MudText>
                                <MudText Typo="Typo.body1">Comentario: @seleccion.Comentario</MudText>
                                <MudText Typo="Typo.body1">ID Tipo de Transacción: @seleccion.IdTipoTransaccion</MudText>
                            </div>
                        
                       
                        </div>
                        }
                       

                    <!-- Tercera columna: Listado -->
                    <div class="col-md-4">
                        <ul class="list-group">
                        @foreach (var item in _transacciones)
                            {
                                <li class="list-group-item" @onclick="() => SeleccionarInformacion(item)">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <AvatarContent>
                                                <MudAvatar>
                                                    <MudImage Src="@item.ImagenUsuario"/>
                                                </MudAvatar>
                                            </AvatarContent>

                                        </div>
                                    <div class="col-md-9 p-0">
                                            <h5>@item.Nombre</h5>
                                        <p class="m-0">@CalcularDiasPasados(@item.FechaCreacion)</p>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
@*
            <MudItem xs="6">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
            </MudItem>
            <MudItem xs="3">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">xs=6</MudPaper>
            </MudItem>
            <MudItem xs="3">
                <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">

                </MudPaper>
            </MudItem> 
        </MudGrid>*@

        <MudText>Content One</MudText>
    </MudTabPanel>
    <MudTabPanel Text="Generar pago">
        <div class="row">

            <button class="btn btn-primary oi-align-right mb-3" @onclick="CierreDiarioAsync">Cierre Diario</button>
        </div>


        @if (vehiculosSinExistencia == null)
        {
            <p>Cargando...</p>
        }
        else
        {
            <MudContainer>
                <MudGrid>
                    @foreach (var vehiculo in vehiculosSinExistencia)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard>
                                <MudCardMedia Image="@vehiculo.Imagen" />

                                <MudCardContent>
                                    <MudText Typo="Typo.h5">Vehículo @vehiculo.IdVehiculo</MudText>
                                    <MudText Typo="Typo.body2">
                                        Año: @vehiculo.Anio<br />
                                        Placa: @vehiculo.Placa<br />
                                        Tarifa Diaria: @vehiculo.TarifaDiaria<br />
                                        Tarifa Ahorro: @vehiculo.TarifaAhorro<br />
                                    </MudText>

                                    <MudCheckBox @bind-Checked="mostrarFechaTransaccionHasta" Label="Mostrar Fecha de Transacción Hasta" />

                                    @if (mostrarFechaTransaccionHasta)
                                    {
                                        <MudTextField @bind-Value="FechaTransaccion" Label="Fecha de Transacción" Type="date" />
                                        <MudTextField @bind-Value="FechaTransaccionHasta" Label="Fecha de Transacción Hasta" Type="date" />
                                    }
                                </MudCardContent>

                                <MudCardActions>
                                    <MudPaper Class="pa-4" Style="@($"color:{Colors.LightGreen.Accent3}")" OnClick="() => EnviarIdVehiculo(vehiculo.IdVehiculo, FechaTransaccion, FechaTransaccionHasta)">
                                        Pago realizado
                                    </MudPaper>
                                </MudCardActions>

                                <MudCardContent>
                                    <MudLink Href="#">Card link</MudLink>
                                    <MudLink Href="#" Class="ml-2">Another link</MudLink>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudContainer>


        }

    </MudTabPanel>
</MudTabs>


@code{
    List<ObtenerTransaccionesResult> _transacciones = new List<ObtenerTransaccionesResult>();
    private ObtenerTransaccionesResult seleccion = new ObtenerTransaccionesResult();
    private bool mostrarDetalles = false;

    DateTime FechaActual = DateTime.Now;
    DateTime FechaTransaccion = DateTime.Now;
    DateTime FechaTransaccionHasta = DateTime.Now;
    bool mostrarFechaTransaccionHasta = false;


    private List<ObtenerVehiculosSinExistenciaHoyResult> vehiculosSinExistencia;
    private List<ObtenerVehiculosResult> vehiculos;


    protected override async Task OnInitializedAsync()
    {
        seleccion.Imagen = "img/5861769.jpg";
        _transacciones = await transaccionesService.ObtenerTransaccionesNoConfirmadasAsync();


        vehiculosSinExistencia = await ComprobanteDiarioService.obtenervehiculossinexistenciahoy();

        Obtenervehiculos(); 

    } 


    // Método para seleccionar la información
    private void SeleccionarInformacion(ObtenerTransaccionesResult info)
    {
        mostrarDetalles = true;
        seleccion = info;
    }


    // Método para calcular los días transcurridos
    private string CalcularDiasPasados(DateTime fecha)
    { 
        var diasPasados = (DateTime.Now - fecha).Days;
        return $"Hace {diasPasados} días";
         
    }



    private async Task CierreDiarioAsync()
    {
        ComprobanteDiarioService.CierreDiarioAsync();
    }

    private async Task Obtenervehiculos()
    {
        vehiculos = await ComprobanteDiarioService.Obtenervehiculos();

    }
}
