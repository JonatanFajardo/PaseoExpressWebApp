@page "/"
@using PaseoExpressWebApp.Context;
@using PaseoExpressWebApp.Models;
@using PaseoExpressWebApp.Services;
@inject IJSRuntime JS
@inject TransaccionesService transaccionesService
@inject NavigationManager Navigation
@inject comprobantediarioservice ComprobanteDiarioService
@inject VehiculoService VehiculoService

@page "/car-dashboard"
@using Microsoft.AspNetCore.SignalR.Client;
@using MudBlazor

<PageTitle>Home</PageTitle>



@if(vehiculoInformacionDashboardResults != null){

    <MudCarousel Class="mud-width-full" @key="vehiculoInformacionDashboardResults.Count" Style="height:485px;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
@foreach (var item in vehiculoInformacionDashboardResults)
{

     <MudCarouselItem Transition="Transition.Slide" >

   
<MudCard>
    <MudCardContent>

<MudContainer  Class="pa-4">
    <!-- Imagen y Título -->
    <MudGrid Spacing="3" AlignItems="center">
        <MudItem xs="12" md="7" Class="text-center">
            <img src="/img/@item.Imagen" alt="Lamborghini Aventador" height="200" />
        </MudItem>
                        <MudItem xs="12" md="5" Class="text-center d-flex justify-center">
                            <div>
                                <MudText Typo="Typo.h3">@item.Marca</MudText>
                                <h3 style="color: #FF4500;">@item.Anio</h3>
                            </div>
                        </MudItem>

    </MudGrid>

    <!-- Tarjetas de Información -->
    <MudGrid Spacing="3" >
        <!-- Tarjeta de Nivel de Aceite -->
        <MudItem xs="12" md="3">
                                    <MudPaper Elevation="4" Class="pa-4 bg-primario-claro">
                 <MudGrid>
                                    <MudItem md="3">
                <MudIcon Icon="@Icons.Material.Outlined.WaterDrop"  />

                                    </MudItem>
                                    <MudItem md="9">
                                        <h4>Nivel Aceite</h4>
                                        <p>Motor</p>
                                    </MudItem>
                             </MudGrid>


                <MudSlider Value="@item.PorcentajeDesgasteAceite" Color="Color.Default" Min="0" Max="100" Disabled="true" />
                <p><strong>Fecha:</strong> Nov 12-20</p>
                <p><strong>Marca:</strong> @item.Marca</p>
            </MudPaper>
        </MudItem>

        <!-- Tarjeta de Frenos (Combustible/Calor) -->
        <MudItem xs="12" md="3">
            <MudPaper Elevation="4" Class="pa-4 bg-primario-claro">
                             <MudGrid>
                                    <MudItem md="3">
                                        <MudIcon Icon="@Icons.Material.Outlined.Circle" />

                                    </MudItem>
                                    <MudItem md="9">
                                        <h4>Llantas</h4>
                                        <p>Delanteras</p>
                                    </MudItem>
                             </MudGrid>
                                        <div class="bg-primario-claro">

                                
                                <MudProgressCircular Color="Color.Default" Size="Size.Large" Value="@((double)@item.PorcentajeDesgasteLlanta1)" Class="mr-2" />
                                <MudProgressCircular Color="Color.Default" Size="Size.Large" Value="@((double)@item.PorcentajeDesgasteLlanta2)" />
                        <p>Left @item.PorcentajeDesgasteLlanta1% | Right @item.PorcentajeDesgasteLlanta2%</p>
                                </div> 
            </MudPaper>
        </MudItem>

                <!-- Tarjeta de Frenos (Combustible/Calor) -->
                      
                <MudItem xs="12" md="3">
                    <MudPaper Elevation="4" Class="pa-4 bg-primario-claro">
                         <MudGrid>
                                    <MudItem md="3">
                                        <MudIcon Icon="@Icons.Material.Outlined.Circle" />
                             
                                    </MudItem>
                                    <MudItem md="9">
                                        <h4>Llantas</h4>
                                        <p>Traseras</p>
                                    </MudItem>
                             </MudGrid>

                        <MudProgressCircular Color="Color.Default" Size="Size.Large" Value="@((double)@item.PorcentajeDesgasteLlanta3)" Class="mr-2" />

                        <MudProgressCircular Color="Color.Default" Size="Size.Large" Value="@((double)@item.PorcentajeDesgasteLlanta4)" />
                                <p>Left @item.PorcentajeDesgasteLlanta3% | Right @item.PorcentajeDesgasteLlanta4%</p>
                    </MudPaper>
                </MudItem>


                        <!-- Tarjeta de Frenos (Combustible/Calor) -->

                        <MudItem xs="12" md="3">
                                    <MudPaper Elevation="4" Class="pa-4 bg-primario-claro">
                                 <MudGrid>
                                    <MudItem md="3">
                                <MudIcon Icon="@Icons.Material.Filled.Air" />
                                        
                                    </MudItem>
                                    <MudItem md="9">
                                <h4>Filtros</h4>
                                <p>Aire</p>
                                    </MudItem>
                             </MudGrid>

                                <MudProgressCircular Color="Color.Default" Size="Size.Large" Value="@((double)@item.PorcentajeDesgasteFiltroCabina)" Class="mr-2" />

                                <MudProgressCircular Color="Color.Default" Size="Size.Large" Value="@((double)@item.PorcentajeDesgasteFiltroMotor)" />
                                <p>Cabina @item.PorcentajeDesgasteFiltroCabina% | Motor @item.PorcentajeDesgasteFiltroMotor%</p>
                            </MudPaper>
                        </MudItem>
    </MudGrid>

</MudContainer>

    </MudCardContent>
</MudCard>
            </MudCarouselItem>
}
    </MudCarousel>

}
else
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />

}

<MudGrid Class="pt-4">
    <MudItem sm="9">
        <MudCard>
            <MudCardHeader>
                <h4>Ingresos y egresos mensuales</h4>

            </MudCardHeader>
            <MudCardContent>

                <canvas id="transaccionesChart" width="400" height="200px"></canvas>

               @* <h3>Gráfica de Transacciones Mensuales por Vehículo</h3>

                <div class="mb-3">
                    <label class="form-label">Seleccione el Vehículo</label>
                    <select @bind="selectedVehiculoId" class="form-select">
                        @if (vehiculos != null)
                        {
                            @foreach (var vehiculo in vehiculos)
                            {
                                <option value="@vehiculo.IdVehiculo">@vehiculo.Placa</option>
                            }
                        }
                    </select>
                </div>*@
            </MudCardContent>
        </MudCard>

    </MudItem>
    <MudItem sm="3">
        @if (vehiculosDiario != null)
        {
            @foreach (var item in vehiculosDiario)
            {
                <article>
                    <MudGrid>
                        <MudItem sm="6">
                            @item.Imagen
                        </MudItem>
                        <MudItem sm="6">
                            <h5>@item.Placa</h5>
                            <p>@item.Nombre</p>
                        </MudItem>

                    </MudGrid>
                </article>
            }
        }

    </MudItem>
</MudGrid>

@*<MudCard>
    <MudCardContent>
    </MudCardContent>
</MudCard>
                
            }
            <MudItem sm="6"></MudItem>



            

@*<canvas id="transaccionesChartVehiculo" width="400" height="200"></canvas>*@

@code {
    private List<ObtenerTransaccionesResult> transacciones;
    private List<TransaccionesMensuales> transaccionesMensuales;
    private List<TransaccionesMensuales> transaccionesMensualesVehiculo;
    private List<Vehiculo> vehiculos;
    private int selectedVehiculoId;
    private List<ObtenerVehiculoInformacionDashboardResult> vehiculoInformacionDashboardResults = new List<ObtenerVehiculoInformacionDashboardResult>();


    //Carousel
    private bool arrows = false;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;

    protected override async Task OnInitializedAsync()
    {


        vehiculoInformacionDashboardResults = await VehiculoService.VehiculoInformacionDashboardAsync();
        vehiculosDiario = await ComprobanteDiarioService.obtenervehiculossinexistenciahoy();

        //await Obtenervehiculos();
        
        //selectedVehiculoId = vehiculos.FirstOrDefault()?.IdVehiculo ?? 0;
        await UpdateGraficas();


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (transaccionesMensuales != null)
        {
            await JS.InvokeVoidAsync("crearGraficaTransacciones", transaccionesMensuales);
            //await JS.InvokeVoidAsync("crearGraficaTransaccionesVehiculo", transaccionesMensualesVehiculo);
        }
    }
    private async Task UpdateGraficas()
    {
     
        transacciones = await transaccionesService.ObtenerTransaccionesAsync();
        vehiculos = transacciones.Select(t => new Vehiculo { IdVehiculo = t.IdVehiculo, Placa = t.Placa })
                                 .Distinct()
                                 .ToList();

    
        transaccionesMensuales = transacciones
            .GroupBy(t => t.FechaTransaccion.Month)
            .Select(g => new TransaccionesMensuales
                {
                    Mes = g.Key,
                    Gastos = g.Where(t => t.IdTipoTransaccion == 2).Sum(t => Math.Abs(t.TarifaDiaria)),
                    Ingresos = g.Where(t => t.IdTipoTransaccion == 1).Sum(t => t.TarifaDiaria)
                }).ToList();

        transaccionesMensualesVehiculo = transacciones
            .Where(t => t.IdVehiculo == selectedVehiculoId)
            .GroupBy(t => t.FechaTransaccion.Month)
            .Select(g => new TransaccionesMensuales
                {
                    Mes = g.Key,
                    Gastos = g.Where(t => t.IdTipoTransaccion == 2).Sum(t => Math.Abs(t.TarifaDiaria)),
                    Ingresos = g.Where(t => t.IdTipoTransaccion == 1).Sum(t => t.TarifaDiaria)
                }).ToList();
        }



    private async Task OnVehiculoChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedId))
        {
            selectedVehiculoId = selectedId;
            await UpdateGraficas();
            await JS.InvokeVoidAsync("crearGraficaTransaccionesVehiculo", transaccionesMensualesVehiculo);
        }
    }


    public class Vehiculo
    {
        public int IdVehiculo { get; set; }
        public string Placa { get; set; }
    }

    public class TransaccionesMensuales
    {
        public int Mes { get; set; }
        public int Gastos { get; set; }
        public int Ingresos { get; set; }
    }

    //fin graficas
    private List<ObtenerVehiculosSinExistenciaHoyResult> vehiculosDiario;

}
