@page "/"
@using PaseoExpressWebApp.Context;
@using PaseoExpressWebApp.Models;
@using PaseoExpressWebApp.Services;
@inject IJSRuntime JS
@inject TransaccionesService transaccionesService

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>
Welcome to your new app.

<h3>Gráfica de Transacciones Mensuales</h3>
<canvas id="transaccionesChart" width="400" height="200"></canvas>

<h3>Gráfica de Transacciones Mensuales por Vehículo</h3>

<div class="mb-3">
    <label class="form-label">Seleccione el Vehículo</label>
    <select @bind="selectedVehiculoId" class="form-select">
        @if (vehiculos != null)
        {
            @foreach (var vehiculo in vehiculos)
            {
                <option value="@vehiculo.IdVehiculo">@vehiculo.Placa</option>
            }
        }
    </select>
</div>

<canvas id="transaccionesChartVehiculo" width="400" height="200"></canvas>

@code {
    private List<ObtenerTransaccionesResult> transacciones;
    private List<TransaccionesMensuales> transaccionesMensuales;
    private List<TransaccionesMensuales> transaccionesMensualesVehiculo;
    private List<Vehiculo> vehiculos;
    private int selectedVehiculoId;

    protected override async Task OnInitializedAsync()
    {
        transacciones = await transaccionesService.ObtenerTransaccionesAsync();
        vehiculos = transacciones.Select(t => new Vehiculo { IdVehiculo = t.IdVehiculo, Placa = t.Placa })
                                 .Distinct()
                                 .ToList();
        
        selectedVehiculoId = vehiculos.FirstOrDefault()?.IdVehiculo ?? 0;
        await UpdateGraficas();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("crearGraficaTransacciones", transaccionesMensuales);
            await JS.InvokeVoidAsync("crearGraficaTransaccionesVehiculo", transaccionesMensualesVehiculo);
        }
    }

    private async Task OnVehiculoChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int selectedId))
        {
            selectedVehiculoId = selectedId;
            await UpdateGraficas();
            await JS.InvokeVoidAsync("crearGraficaTransaccionesVehiculo", transaccionesMensualesVehiculo);
        }
    }

    private async Task UpdateGraficas()
    {
        transaccionesMensuales = transacciones
            .GroupBy(t => t.FechaTransaccion.Month)
            .Select(g => new TransaccionesMensuales
            {
                Mes = g.Key,
                Gastos = g.Where(t => t.IdTipoTransaccion == 1).Sum(t => t.TarifaDiaria),
                Ingresos = g.Where(t => t.IdTipoTransaccion == 2).Sum(t => t.TarifaDiaria)
            }).ToList();

        transaccionesMensualesVehiculo = transacciones
            .Where(t => t.IdVehiculo == selectedVehiculoId)
            .GroupBy(t => t.FechaTransaccion.Month)
            .Select(g => new TransaccionesMensuales
            {
                Mes = g.Key,
                Gastos = g.Where(t => t.IdTipoTransaccion == 1).Sum(t => t.TarifaDiaria),
                Ingresos = g.Where(t => t.IdTipoTransaccion == 2).Sum(t => t.TarifaDiaria)
            }).ToList();
    }

    public class Vehiculo
    {
        public int IdVehiculo { get; set; }
        public string Placa { get; set; }
    }

    public class TransaccionesMensuales
    {
        public int Mes { get; set; }
        public int Gastos { get; set; }
        public int Ingresos { get; set; }
    }
}

<SurveyPrompt Title="How is Blazor working for you?" />
