@page "/chatui"
@attribute [Authorize]

@using Microsoft.AspNetCore.SignalR.Client;
@using PaseoExpressWebApp.Models;
@using PaseoExpressWebApp.Services;
@using PaseoExpressWebApp.Extensiones;
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ChatSignalService chatSignalService
@inject AuthenticationStateProvider AuthenticationStateProvider


  <div class="">
    <div class="row p-0 " style="">
      <!-- Sidebar -->
      <div class="col-4 ">
            <div class="card overflow-y-auto ajuste-altura" style="">

        @*<h6 class="p-3">Ballistic HQ</h6>*@
<div class="d-grid gap-2 d-md-block px-3 py-4">
    <button class="btn btn-dark btn-sm w-auto"  @onclick="MostrarTodos">Mostrar Todo</button>
    <button class="btn btn-light btn-sm" @onclick="MostrarNoLeidos">No Leídos</button>
    <button class="btn btn-light btn-sm" @onclick="MostrarLeidos">Leídos</button>
</div>
        <ul class="list-group">




@if (usuariosFiltrados != null)
                    {
                        @foreach (var usuario in usuariosFiltrados)
                        {
                            <li class="list-group-item border-bottom d-flex align-items-start mb-2" >
                            <img src="@usuario.Imagen" height="50" alt="Imagen de usuario" class="me-2 rounded-circle" />

                            <div class="d-flex flex-column flex-grow-1"> 
                                <div class="d-flex justify-content-between">
                                        <bottom @onclick="async ()=> ObtenerMensajes(IdUsuario, usuario.IdUsuario)">mensaje</bottom>
                                    <span class="h5 m-0" >@usuario.Usuario
                                        @if (!usuario.IsRead)
                                        {
                                                        <span class="punto-amarillo bg-warning"></span>
                                        }
                                    </span>
                                    <span>@usuario.Time.ToString("dd/MM/yy")</span>
                                </div>

                                <div class="d-flex justify-content-between">
                                    <div>

                                                                <span class="badge bg-dark fw-light text-white mr-2">@usuario.TagMensajeria</span>
                                                                <br/>
                                    <span>@usuario.Description</span>
                                    </div>
                                    <div>
                                                        @*<span class="badge bg-dark fw-light text-white mr-2">@usuario.TagMensajeria</span>*@
                                        @if (usuario.SenderId == IdUsuario)
                                        {
                                                            <span class="badge bg-warning fw-light text-black">Inatendido</span>

                                        }
                                    </div>
                                </div>
                            </div>
                        </li>
                        }
                    }
        </ul>
      </div>
          </div>

      <!-- Chat Window -->
        <div class="col-6 " >

            <div class="card overflow-y-auto ajuste-altura" style="">
    <div class="d-flex align-items-center mb-3 ">
                    <div class="flex-grow-1 header-chat">
            <h5 class="mb-0">tony</h5>
            <small class="text-muted">Away</small>
        </div>

    </div>

    <div class="card-body d-flex flex-column-reverse" style="height: 100vh;">

                @if(mensajes != null)
                {
                    
                    @foreach (var mensaje in mensajes)
                    {
                        <div class="@(mensaje.SenderId == IdUsuario ? "message bot" : "message user")">
                            @mensaje.Description
                    <div class="message-time">@mensaje.Time.ToString("h:mm tt")</div>
                </div>
                    }
                }
    </div>

                <!-- Input flotante -->
                <div class="input-area d-flex align-items-center">
                        <input type="text" class="form-control" placeholder="Type here...">
                    <i class="fa-solid fa-paperclip"></i>
                        <button class="btn btn-primary" type="button">SEND</button>
                </div>

</div>
      </div>

      <!-- Profile Panel -->
        <div class="col-2 ajuste-altura">
        <h6>Visitor Details</h6>
        <p><strong>tony</strong></p>
        <p><i class="bi bi-envelope"></i> tony@gmail.com</p>
        <p><i class="bi bi-geo-alt"></i> San Jose, United States</p>
        <p><i class="bi bi-clock"></i> 41 visits</p>
      </div>
    </div>
  </div>


@code{
    List<PR_Chat_ObtenerUltimoMensajePorUsuarioResult> usuarios;
    List<PR_Chat_ObtenerUltimoMensajePorUsuarioResult> usuariosFiltrados;

    List<PR_Chat_ObtenerMensajesUsuarioResult> mensajes;
    private string userId;

    int IdUsuario = 1;

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        usuarios = await chatSignalService.ObtenerUltimoMensajePorUsuario(1);

        // Inicializamos los usuarios filtrados con todos los usuarios al inicio
        usuariosFiltrados = usuarios;

    }

    private void MostrarTodos() => AplicarFiltro("Todos");
    private void MostrarNoLeidos() => AplicarFiltro("No Leídos");
    private void MostrarLeidos() => AplicarFiltro("Leídos");

    private void AplicarFiltro(string filtro)
    {
        if (filtro == "No Leídos")
        {
            usuariosFiltrados = usuarios.Where(u => u.IsRead == false).ToList();

        }
        else if (filtro == "Leídos")
        {
            usuariosFiltrados = usuarios.Where(u => u.IsRead == true).ToList();
        }
        else
        {
            usuariosFiltrados = usuarios; // Mostrar todos
        }
    }

    public async Task ObtenerMensajes(int IdUsuarioOne, int IdUsuarioTwo)
    {
        mensajes = await chatSignalService.ObtenerMensajesPorUsuario(IdUsuarioOne, IdUsuarioTwo);
    }


}