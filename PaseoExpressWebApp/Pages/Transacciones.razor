@page "/transacciones"
@using PaseoExpressWebApp.Context;
@using PaseoExpressWebApp.Services;
@inject TransaccionesService transaccionesService
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation
@*table*@
@using System.Net.Http.Json 
@inject HttpClient httpClient

<h3>Transacciones</h3>
<p>Gestione y registre transacciones relacionadas con los servicios, incluyendo detalles de costos, mantenimiento y datos del vehículo.</p>



<MudTable Items="@transacciones" SortLabel="Sort By" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    @*<ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
    </ToolBarContent>*@
    <HeaderContent>
        <MudTh>Imagen</MudTh>
        <MudTh>Ultima Suma</MudTh>
        <MudTh>Id Vehículo	</MudTh>
        <MudTh>Año</MudTh>
        <MudTh>Placa</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Tarifa Diaria</MudTh>
        <MudTh>Tarifa Ahorro</MudTh>
        <MudTh>Fecha Transacción</MudTh>
        <MudTh>Comentario</MudTh> 
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Imagen">@context.Imagen</MudTd>
        <MudTd DataLabel="Ultima Suma">@context.UltimaSuma</MudTd>
        <MudTd DataLabel="Id Vehículo">@context.IdVehiculo</MudTd>
        <MudTd DataLabel="Año">@context.Anio</MudTd>
        <MudTd DataLabel="Placa">@context.Placa</MudTd>
        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
        <MudTd DataLabel="Tarifa Diaria">@context.TarifaDiaria</MudTd>
        <MudTd DataLabel="Tarifa Ahorro">@context.TarifaAhorro</MudTd>
        <MudTd DataLabel="Fecha Transacción">@context.FechaTransaccion</MudTd>
        <MudTd DataLabel="Comentario">@context.Comentario</MudTd>
    </RowTemplate>
    <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                           RowsPerPageString="@rowsPerPageString"
                           InfoFormat="@infoFormat"
                           AllItemsText="@allItemsText"
                           HorizontalAlignment="@horizontalAlignment"
                           HideRowsPerPage="@hideRowsPerPage"
                           HidePageNumber="@hidePageNumber"
                           HidePagination="@hidePagination" />
    </PagerContent>
</MudTable>

 

@*
<table class="table table-striped">
    <thead>
        <tr>
            <th>Imagen</th>
            <th>Ultima Suma</th>
            <th>Id Vehículo</th>
            <th>Año</th>
            <th>Placa</th>
            <th>Nombre</th>
            <th>Tarifa Diaria</th>
            <th>Tarifa Ahorro</th>
            <th>Fecha Transacción</th>
            <th>Comentario</th>
        </tr>
    </thead>
    <tbody>
        @if (transacciones == null)
        {
            <tr>
                <td colspan="10">Cargando...</td>
            </tr>
        }
        else
        {
            @foreach (var transaccion in transacciones)
            {
                <tr>
                    <td><img src="@transaccion.Imagen" alt="Imagen" class="img-thumbnail" /></td>
                    <td>@transaccion.UltimaSuma</td>
                    <td>@transaccion.IdVehiculo</td>
                    <td>@transaccion.Anio</td>
                    <td>@transaccion.Placa</td>
                    <td>@transaccion.Nombre</td>
                    <td>@transaccion.TarifaDiaria</td>
                    <td>@transaccion.TarifaAhorro</td>
                    <td>@transaccion.FechaTransaccion.ToString("dd/MM/yyyy")</td>
                    <td>@transaccion.Comentario</td>
                </tr>
            }
        }
    </tbody>
</table>
*@

@code {
    //table
    private bool _loading = true;
    private bool dense = true;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    //private Element selectedItem1 = null;

    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";
    //table
     

    private HubConnection? hubConnection;
    private string message = "Esperando mensajes...";

    private IEnumerable<ObtenerTransaccionesResult> transacciones = new List<ObtenerTransaccionesResult>();

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
          .WithUrl(Navigation.ToAbsoluteUri("/YourHub")) // URL de tu hub
          .Build();

        //hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        //{
        //    this.message = $"{user}: {message}";
        //    InvokeAsync(StateHasChanged);
        //});

        hubConnection.On<List<ObtenerTransaccionesResult>>("RecibirTransacciones", (transaccionesRecibidas) =>
      {
          transacciones = transaccionesRecibidas;
          _loading = false;
          InvokeAsync(StateHasChanged);
      });


        await hubConnection.StartAsync();

        await ObtenerTransacciones();

        //transacciones = await transaccionesService.ObtenerTransaccionesAsync();
    }


    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }



    private async Task StartConnection()
    {
        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("Conexión establecida.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al conectar: {ex.Message}");
        }
    }

    private async Task ObtenerTransacciones()
    {
        //if (hubConnection is not null)
        //{
        //    await hubConnection.SendAsync("ObtenerYEnviarTransacciones");
        //}

        if (hubConnection is not null)
        {
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("ObtenerYEnviarTransacciones");
            }
            else
            {
                Console.WriteLine($"La conexión no está establecida. Estado actual: {hubConnection.State}");
            }
        }
    }

     
}
