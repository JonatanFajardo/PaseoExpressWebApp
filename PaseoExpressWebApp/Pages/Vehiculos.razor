@page "/vehiculos"
@using PaseoExpressWebApp.Context;
@using PaseoExpressWebApp.Services;
@inject NavigationManager Navigation
@inject comprobantediarioservice ComprobanteDiarioService
@inject TransaccionesService transaccionesService
@using Microsoft.AspNetCore.SignalR.Client;

<PageTitle>Vehículo</PageTitle>

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
     
    @if (vehiculos == null)
    {
        <p>Cargando...</p>
    }
    else
    {

            <MudCard Class="pb-5" style="max-width:100%; min-width:100%;">
                <div class="p-3">
                            <H5>Vehículos</H5>
                    <span>
                        Aqui puedes mantenerte al tanto sobre la información vehicular.
                    </span>

            </div>
            <MudCardContent>
                <MudTable Items="@vehiculos" SortLabel="Sort By" Dense="true" Hover="true" Bordered="true" Striped="true" Breakpoint="Breakpoint.Md" LoadingProgressColor="Color.Info" HorizontalScrollbar="true">
                    <HeaderContent>
                        <MudTh>Acciones</MudTh>
                        <MudTh>Imagen</MudTh>
                        <MudTh>Marca</MudTh>
                        <MudTh>Modelo</MudTh>
                        <MudTh>Anio</MudTh>
                        @*<MudTh>VIN</MudTh>*@
                        <MudTh>Placa</MudTh>
                        @*<MudTh>Kilometraje</MudTh>*@
                        @*<MudTh>Millaje</MudTh>*@
                        <MudTh>Color</MudTh>
                        @*<MudTh>Tarifa Diaria</MudTh>*@
                        @*<MudTh>Tarifa Ahorro</MudTh>*@
                        <MudTh>Propietario</MudTh>
                        <MudTh>Conductor</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudButton  Class="bg-primario-oscuro" OnClick="() => DetalleVehiculo(context.IdVehiculo)">
                                <span>Detalles</span>
                            </MudButton>
                        </MudTd>

                    <MudTd>
                        <img src="/img/@context.Imagen" class="img-fluid " alt="Imagen" width="50" height="50" />
                    </MudTd>
                    <MudTd DataLabel="Marca">@context.Marca</MudTd>
                        <MudTd DataLabel="Modelo">@context.Modelo</MudTd>
                        <MudTd DataLabel="año">@context.Anio</MudTd>
                        @*<MudTd DataLabel="Vin">@context.VIN</MudTd>*@
                        <MudTd DataLabel="Placa">@context.Placa</MudTd>
                        @*<MudTd DataLabel="Kilometraje">@context.Kilometraje</MudTd>*@
                        @*<MudTd DataLabel="Millaje">@context.Millaje</MudTd>*@
                        <MudTd DataLabel="Color">@context.Color</MudTd>
                        @*<MudTd DataLabel="TarifaDiaria">@context.TarifaDiaria</MudTd>*@
                        @*<MudTd DataLabel="TarifaAhorro">@context.TarifaAhorro</MudTd>*@
                        <MudTd DataLabel="Propietario">@context.Propietario</MudTd>
                        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                    </RowTemplate> 
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                                    RowsPerPageString="@rowsPerPageString"
                                    InfoFormat="@infoFormat"
                                    AllItemsText="@allItemsText"
                                    HorizontalAlignment="@horizontalAlignment"
                                    HideRowsPerPage="@hideRowsPerPage"
                                    HidePageNumber="@hidePageNumber"
                                    HidePagination="@hidePagination" />
                    </PagerContent>
                </MudTable>
            </MudCardContent>
        </MudCard>

    }


@code {
    private int currentCount = 0;
    DateTime FechaActual = DateTime.Now; 

    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Right;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Rows per page:";
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string allItemsText = "All";

    //private List<ObtenerVehiculosSinExistenciaHoyResult> vehiculosSinExistencia = new List<ObtenerVehiculosSinExistenciaHoyResult>(); // Initialize an empty list

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
       .WithUrl(Navigation.ToAbsoluteUri("/YourHub"))
       .Build();

        //// Manejar errores de conexión
        //hubConnection.Closed += async(error) =>
        //{
        //    Console.WriteLine("Conexión cerrada. Intentando reconectar...");
        //    await Task.Delay(2000); // Esperar 2 segundos antes de intentar reconectar
        //await StartConnection();
        //};
        await StartConnection();

        vehiculosSinExistencia = await ComprobanteDiarioService.obtenervehiculossinexistenciahoy();

        Obtenervehiculos(); 
    }

    private async Task EnviarSolicitudActualizarTransaccion()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("ActualizarTransaccion");
        }
        else
        {
            Console.WriteLine($"La conexión no está establecida. Estado actual: {hubConnection?.State}");
        }
    }

    private async Task StartConnection()
    {
        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al conectar: {ex.Message}");
        }
    }
    

    //public async ValueTask DisposeAsync()
    //{
    //    if (hubConnection is not null)
    //    {
    //        await hubConnection.DisposeAsync();
    //    }
    //}





    private List<ObtenerVehiculosSinExistenciaHoyResult> vehiculosSinExistencia;
    private List<ObtenerVehiculosResult> vehiculos;
     
    private async Task Obtenervehiculos()
    {
        vehiculos = await ComprobanteDiarioService.Obtenervehiculos();

        UpdateTable();
    }

    private async Task EnviarIdVehiculo(int idVehiculo, DateTime FechaTransaccion, DateTime FechaTransaccionHasta)
    {
        if (FechaTransaccionHasta.ToString() == FechaActual.ToString())
        {
            ComprobanteDiarioService.TransaccionTarifaNoPagada(idVehiculo, FechaTransaccion, null);
        }else
        {
            ComprobanteDiarioService.TransaccionTarifaNoPagada(idVehiculo, FechaTransaccion, FechaTransaccionHasta);
        }
        //vehiculosSinExistencia = await ComprobanteDiarioService.obtenervehiculossinexistenciahoy();

    }


    private async Task DetalleVehiculo(int idVehiculo)
    {
        Navigation.NavigateTo($"/vehiculodetalle/{idVehiculo}");
        //ComprobanteDiarioService.TransaccionTarifaNoPagada(idVehiculo);
        //ObtenerVehiculosSinExistenciaHoy();

    }



    private void UpdateTable()
    {
        // Notify the UI that data has changed (if using Blazor)
        StateHasChanged();
    }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Vehiculos", href: null, disabled: true),
    };
}