@page "/counter"
@using PaseoExpressWebApp.Context;
@using PaseoExpressWebApp.Data;
@using PaseoExpressWebApp.Services;
@inject NavigationManager Navigation
@inject comprobantediarioservice ComprobanteDiarioService

@inject TransaccionesService transaccionesService


@using Microsoft.AspNetCore.SignalR.Client;

<PageTitle>Counter</PageTitle>
<div class="container">

    <h1>Cuota pendiente</h1>
    <button class="btn btn-primary" @onclick="EnviarSolicitudActualizarTransaccion">Actualizar Transacción</button>

    <p role="status">Current count: @currentCount</p>

    <button class="btn btn-primary" @onclick="ObtenerVehiculosSinExistenciaHoy">Click me</button>
    <button class="btn btn-primary" @onclick="CierreDiarioAsync">Cierre Diario</button>


    @if (vehiculosSinExistencia == null)
    {
        <p>Cargando...</p>
    }
    else
    {
        <div class="container">

            <div class="row">
                @foreach (var vehiculo in vehiculosSinExistencia)
                {
                    <div class="col-sm-4">
                        <div class="card">
                            <img ng-src="img/@vehiculo.Imagen" class="card-img-top" alt="Imagen de {{vehiculo.Imagen}}">

                            <div class="card-body">
                                <h5 class="card-title">Vehículo @vehiculo.IdVehiculo</h5>
                                <p class="card-text">
                                    Año: @vehiculo.Anio<br>
                                    Placa: @vehiculo.Placa<br>
                                    Tarifa Diaria: @vehiculo.TarifaDiaria<br>
                                    Tarifa Ahorro: @vehiculo.TarifaAhorro<br>


                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" @bind="@mostrarFechaTransaccionHasta">
                                        <label class="form-check-label">
                                            Mostrar Fecha de Transacción Hasta
                                        </label>
                                    </div>

                                    @if (mostrarFechaTransaccionHasta)
                                    {
                                        <div>
                                            Fecha de Transacción:
                                            <input type="date" @bind="@FechaTransaccion" name="FechaTransaccion" class="form-control" /><br>

                                            Fecha de Transacción Hasta:
                                            <input type="date" @bind="@FechaTransaccionHasta" name="FechaTransaccionHasta" class="form-control" />
                                        </div>
                                    }

                                </p>
                            </div>

                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">
                                    <button class="btn btn-primary" @onclick="() => EnviarIdVehiculo(vehiculo.IdVehiculo, FechaTransaccion, FechaTransaccionHasta)">Pago</button>
                                </li>
                            </ul>
                            <div class="card-body">
                                <a href="#" class="card-link">Card link</a>
                                <a href="#" class="card-link">Another link</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

    }
    @if (vehiculos == null)
    {
        <p>Cargando...</p>
    }
    else
    {
        <div class="card">
            <div class="card-header"><h1>Vehiculos</h1></div>
            <div class="table-responsive">
                <table class="table">
                <thead class="table-light">
                        <tr>
                            <th>Acciones</th>
                            <th>IdVehiculo</th>
                            <th>Marca</th>
                            <th>Modelo</th>
                            <th>Anio</th>
                            <th>VIN</th>
                            <th>Placa</th>
                            <th>Kilometraje</th>
                            <th>Millaje</th>
                            <th>Color</th>
                            <th>TarifaDiaria</th>
                            <th>TarifaAhorro</th>
                            <th>Propietario</th>
                            <th>Nombre</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var vehiculo in vehiculos)
                        {
                            <tr>
                                <td>
                                    <button class="btn btn-primary" @onclick="() => DetalleVehiculo(vehiculo.IdVehiculo)">Ver detalles</button>
                                </td>
                                <td>@vehiculo.IdVehiculo</td>
                                <td>@vehiculo.Marca</td>
                                <td>@vehiculo.Modelo</td>
                                <td>@vehiculo.Anio</td>
                                <td>@vehiculo.VIN</td>
                                <td>@vehiculo.Placa</td>
                                <td>@vehiculo.Kilometraje</td>
                                <td>@vehiculo.Millaje</td>
                                <td>@vehiculo.Color</td>
                                <td>@vehiculo.TarifaDiaria</td>
                                <td>@vehiculo.TarifaAhorro</td>
                                <td>@vehiculo.Propietario</td>
                                <td>@vehiculo.Nombre</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>


@code {
    private int currentCount = 0;
    DateTime FechaActual = DateTime.Now;
    DateTime FechaTransaccion = DateTime.Now;
    DateTime FechaTransaccionHasta = DateTime.Now;
    bool mostrarFechaTransaccionHasta = false;

    //private List<ObtenerVehiculosSinExistenciaHoyResult> vehiculosSinExistencia = new List<ObtenerVehiculosSinExistenciaHoyResult>(); // Initialize an empty list

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
       .WithUrl(Navigation.ToAbsoluteUri("/YourHub"))
       .Build();

        //// Manejar errores de conexión
        //hubConnection.Closed += async(error) =>
        //{
        //    Console.WriteLine("Conexión cerrada. Intentando reconectar...");
        //    await Task.Delay(2000); // Esperar 2 segundos antes de intentar reconectar
        //await StartConnection();
        //};
        await StartConnection();

        vehiculosSinExistencia = await ComprobanteDiarioService.obtenervehiculossinexistenciahoy();

        Obtenervehiculos();
        ObtenerVehiculosSinExistenciaHoy();
    }

    private async Task EnviarSolicitudActualizarTransaccion()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("ActualizarTransaccion");
        }
        else
        {
            Console.WriteLine($"La conexión no está establecida. Estado actual: {hubConnection?.State}");
        }
    }

    private async Task StartConnection()
    {
        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al conectar: {ex.Message}");
        }
    }
    

    //public async ValueTask DisposeAsync()
    //{
    //    if (hubConnection is not null)
    //    {
    //        await hubConnection.DisposeAsync();
    //    }
    //}





    private List<ObtenerVehiculosSinExistenciaHoyResult> vehiculosSinExistencia;
    private List<ObtenerVehiculosResult> vehiculos;

    private async Task ObtenerVehiculosSinExistenciaHoy()
    {
  
    }

    private async Task Obtenervehiculos()
    {
        vehiculos = await ComprobanteDiarioService.Obtenervehiculos();

        UpdateTable();
    }

    private async Task EnviarIdVehiculo(int idVehiculo, DateTime FechaTransaccion, DateTime FechaTransaccionHasta)
    {
        if (FechaTransaccionHasta.ToString() == FechaActual.ToString())
        {
            ComprobanteDiarioService.TransaccionTarifaNoPagada(idVehiculo, FechaTransaccion, null);
        }else
        {
            ComprobanteDiarioService.TransaccionTarifaNoPagada(idVehiculo, FechaTransaccion, FechaTransaccionHasta);
        }
        //vehiculosSinExistencia = await ComprobanteDiarioService.obtenervehiculossinexistenciahoy();

    }


    private async Task DetalleVehiculo(int idVehiculo)
    {
        Navigation.NavigateTo($"/vehiculodetalle/{idVehiculo}");
        //ComprobanteDiarioService.TransaccionTarifaNoPagada(idVehiculo);
        //ObtenerVehiculosSinExistenciaHoy();

    }



    private async Task CierreDiarioAsync()
    {
        ComprobanteDiarioService.CierreDiarioAsync();
    }

    private void UpdateTable()
    {
        // Notify the UI that data has changed (if using Blazor)
        StateHasChanged();
    }
}