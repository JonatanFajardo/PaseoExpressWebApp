@page "/counter"
@using PaseoExpressWebApp.Context;
@using PaseoExpressWebApp.Data;
@using PaseoExpressWebApp.Services;
@inject NavigationManager Navigation
@inject comprobantediarioservice ComprobanteDiarioService

@inject TransaccionesService transaccionesService


@using Microsoft.AspNetCore.SignalR.Client;

<PageTitle>Counter</PageTitle>
<div class="container">

    <h1>Cuota pendiente</h1>
    <button class="btn btn-primary" @onclick="EnviarSolicitudActualizarTransaccion">Actualizar Transacción</button>

    <p role="status">Current count: @currentCount</p>

    <button class="btn btn-primary" @onclick="ObtenerVehiculosSinExistenciaHoy">Click me</button>
    <button class="btn btn-primary" @onclick="CierreDiarioAsync">Cierre Diario</button>


    @if (vehiculosSinExistencia == null)
    {
        <p>Cargando...</p>
    }
    else
    {
        <MudContainer>
            <MudGrid>
                @foreach (var vehiculo in vehiculosSinExistencia)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard>
                            <MudCardMedia Image="@vehiculo.Imagen"   />

                            <MudCardContent>
                                <MudText Typo="Typo.h5">Vehículo @vehiculo.IdVehiculo</MudText>
                                <MudText Typo="Typo.body2">
                                    Año: @vehiculo.Anio<br />
                                    Placa: @vehiculo.Placa<br />
                                    Tarifa Diaria: @vehiculo.TarifaDiaria<br />
                                    Tarifa Ahorro: @vehiculo.TarifaAhorro<br />
                                </MudText>

                                <MudCheckBox @bind-Checked="mostrarFechaTransaccionHasta" Label="Mostrar Fecha de Transacción Hasta" />

                                @if (mostrarFechaTransaccionHasta)
                                {
                                    <MudTextField @bind-Value="FechaTransaccion" Label="Fecha de Transacción" Type="date" />
                                    <MudTextField @bind-Value="FechaTransaccionHasta" Label="Fecha de Transacción Hasta" Type="date" />
                                }
                            </MudCardContent>

                            <MudCardActions >
                                <MudPaper Class="pa-4" Style="@($"color:{Colors.LightGreen.Accent3}")" OnClick="() => EnviarIdVehiculo(vehiculo.IdVehiculo, FechaTransaccion, FechaTransaccionHasta)">
                                    Pago realizado
                                </MudPaper>
                            </MudCardActions>

                            <MudCardContent>
                                <MudLink Href="#">Card link</MudLink>
                                <MudLink Href="#" Class="ml-2">Another link</MudLink>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>


    }
    @if (vehiculos == null)
    {
        <p>Cargando...</p>
    }
    else
    {
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h4">Vehículos</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="@vehiculos" SortLabel="Sort By" Dense="true" Hover="true" Bordered="true" Striped="true" Breakpoint="Breakpoint.Sm" Loading="true" LoadingProgressColor="Color.Info">
                    <HeaderContent>
                        <MudTh>Acciones</MudTh>
                        <MudTh>IdVehiculo</MudTh>
                        <MudTh>Marca</MudTh>
                        <MudTh>Modelo</MudTh>
                        <MudTh>Anio</MudTh>
                        <MudTh>VIN</MudTh>
                        <MudTh>Placa</MudTh>
                        <MudTh>Kilometraje</MudTh>
                        <MudTh>Millaje</MudTh>
                        <MudTh>Color</MudTh>
                        <MudTh>Tarifa Diaria</MudTh>
                        <MudTh>Tarifa Ahorro</MudTh>
                        <MudTh>Propietario</MudTh>
                        <MudTh>Nombre</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudButton  OnClick="() => DetalleVehiculo(context.IdVehiculo)">
                                Ver detalles
                            </MudButton>
                        </MudTd>
                        <MudTd DataLabel="Id Vehiculo">@context.IdVehiculo</MudTd>
                        <MudTd DataLabel="Marca">@context.Marca</MudTd>
                        <MudTd DataLabel="Modelo">@context.Modelo</MudTd>
                        <MudTd DataLabel="año">@context.Anio</MudTd>
                        <MudTd DataLabel="Vin">@context.VIN</MudTd>
                        <MudTd DataLabel="Placa">@context.Placa</MudTd>
                        <MudTd DataLabel="Kilometraje">@context.Kilometraje</MudTd>
                        <MudTd DataLabel="Millaje">@context.Millaje</MudTd>
                        <MudTd DataLabel="Color">@context.Color</MudTd>
                        <MudTd DataLabel="TarifaDiaria">@context.TarifaDiaria</MudTd>
                        <MudTd DataLabel="TarifaAhorro">@context.TarifaAhorro</MudTd>
                        <MudTd DataLabel="Propietario">@context.Propietario</MudTd>
                        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>
        </MudCard>

    }
</div>


@code {
    private int currentCount = 0;
    DateTime FechaActual = DateTime.Now;
    DateTime FechaTransaccion = DateTime.Now;
    DateTime FechaTransaccionHasta = DateTime.Now;
    bool mostrarFechaTransaccionHasta = false;

    //private List<ObtenerVehiculosSinExistenciaHoyResult> vehiculosSinExistencia = new List<ObtenerVehiculosSinExistenciaHoyResult>(); // Initialize an empty list

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
       .WithUrl(Navigation.ToAbsoluteUri("/YourHub"))
       .Build();

        //// Manejar errores de conexión
        //hubConnection.Closed += async(error) =>
        //{
        //    Console.WriteLine("Conexión cerrada. Intentando reconectar...");
        //    await Task.Delay(2000); // Esperar 2 segundos antes de intentar reconectar
        //await StartConnection();
        //};
        await StartConnection();

        vehiculosSinExistencia = await ComprobanteDiarioService.obtenervehiculossinexistenciahoy();

        Obtenervehiculos();
        ObtenerVehiculosSinExistenciaHoy();
    }

    private async Task EnviarSolicitudActualizarTransaccion()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("ActualizarTransaccion");
        }
        else
        {
            Console.WriteLine($"La conexión no está establecida. Estado actual: {hubConnection?.State}");
        }
    }

    private async Task StartConnection()
    {
        try
        {
            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al conectar: {ex.Message}");
        }
    }
    

    //public async ValueTask DisposeAsync()
    //{
    //    if (hubConnection is not null)
    //    {
    //        await hubConnection.DisposeAsync();
    //    }
    //}





    private List<ObtenerVehiculosSinExistenciaHoyResult> vehiculosSinExistencia;
    private List<ObtenerVehiculosResult> vehiculos;

    private async Task ObtenerVehiculosSinExistenciaHoy()
    {
  
    }

    private async Task Obtenervehiculos()
    {
        vehiculos = await ComprobanteDiarioService.Obtenervehiculos();

        UpdateTable();
    }

    private async Task EnviarIdVehiculo(int idVehiculo, DateTime FechaTransaccion, DateTime FechaTransaccionHasta)
    {
        if (FechaTransaccionHasta.ToString() == FechaActual.ToString())
        {
            ComprobanteDiarioService.TransaccionTarifaNoPagada(idVehiculo, FechaTransaccion, null);
        }else
        {
            ComprobanteDiarioService.TransaccionTarifaNoPagada(idVehiculo, FechaTransaccion, FechaTransaccionHasta);
        }
        //vehiculosSinExistencia = await ComprobanteDiarioService.obtenervehiculossinexistenciahoy();

    }


    private async Task DetalleVehiculo(int idVehiculo)
    {
        Navigation.NavigateTo($"/vehiculodetalle/{idVehiculo}");
        //ComprobanteDiarioService.TransaccionTarifaNoPagada(idVehiculo);
        //ObtenerVehiculosSinExistenciaHoy();

    }



    private async Task CierreDiarioAsync()
    {
        ComprobanteDiarioService.CierreDiarioAsync();
    }

    private void UpdateTable()
    {
        // Notify the UI that data has changed (if using Blazor)
        StateHasChanged();
    }
}