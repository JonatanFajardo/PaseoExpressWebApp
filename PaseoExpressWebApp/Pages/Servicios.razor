@page "/servicios"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using PaseoExpressWebApp.Context;
@using PaseoExpressWebApp.Models;
@using PaseoExpressWebApp.Services;
@inject ServicioServices servicioServices
@inject IJSRuntime JsRuntime
@inject IWebHostEnvironment WebHostEnvironment
<EditForm Model="@servicio" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label class="form-label">Tipo Servicio</label>
                <select class="form-select" @onchange="OnTipoServicioChanged">
                    <option value="0">--Seleccionar--</option> <!-- Opción por defecto -->
                    @foreach (var tipoServicio in tiposServicios)
                    {
                        <option value="@tipoServicio.IdTipoServicio">@tipoServicio.Nombre</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label class="form-label">Título</label>
                <InputText @bind-Value="servicio.Titulo" class="form-control" />
            </div>

            <!-- Otros campos para PC -->
            <div class="mb-3">
                <label class="form-label">Descripción</label>
                <InputTextArea @bind-Value="servicio.Descripcion" class="form-control" />
            </div>

            <!-- Otros campos para PC -->
            <div class="mb-3">
                <label class="form-label">Fecha Servicio</label>
                <InputDate @bind-Value="servicio.FechaServicio" class="form-control" />
            </div>

            <!-- Otros campos para PC -->
            <div class="mb-3">
                <label class="form-label">Cantidad Comprada</label>
                <InputNumber @bind-Value="servicio.CantidadComprada" class="form-control" @oninput="CalcularCostoTotal" @onblur="CalcularCostoTotal" />
            </div>

            <!-- Otros campos para PC -->
            <div class="mb-3">
                <label class="form-label">Costo Unitario</label>
                <InputNumber @bind-Value="servicio.CostoUnitario" class="form-control" @oninput="CalcularCostoTotal" @onblur="CalcularCostoTotal" />
            </div>

            <!-- Otros campos para PC -->
            <!-- ... -->

        </div>

        <div class="col-md-6">
            <div class="mb-3">
                <label class="form-label">Imágenes</label>
                <InputFile OnChange="OnInputFileChange" class="form-control" />
            </div>

            <!-- Otros campos para PC -->
            <div class="mb-3">
                <label class="form-label">Marca</label>
                <InputText @bind-Value="servicio.Marca" class="form-control" />
            </div>

            <!-- Otros campos para PC -->
            <div class="mb-3">
                <label class="form-label">Tipo Mantenimiento</label>
                <select @bind="servicio.IdTipoMantenimiento" class="form-select">
                    <option value="0">--Seleccionar--</option> <!-- Opción por defecto -->
                    @foreach (var tipoMantenimiento in tiposMantenimientos)
                    {
                        <option value="@tipoMantenimiento.IdTipoMantenimiento">@tipoMantenimiento.Nombre</option>
                    }
                </select>
            </div>

            <!-- Otros campos para PC -->
            <div class="mb-3">
                <label class="form-label">Kilometraje Vehículo</label>
                <InputNumber @bind-Value="servicio.KilometrajeVehiculo" class="form-control" />
            </div>

            <!-- Otros campos para PC -->
            <div class="mb-3">
                <label class="form-label">Millaje Vehículo</label>
                <InputNumber @bind-Value="servicio.MillajeVehiculo" class="form-control" />
            </div>

            <!-- Otros campos para PC -->
            <!-- ... -->

        </div>
    </div>

    <!-- Campos que siempre se muestran en una línea -->
    <div class="mb-3">
        <label class="form-label">Próxima Fecha Mantenimiento</label>
        <InputDate @bind-Value="servicio.ProximaFechaMantenimiento" class="form-control" />
    </div>

    <!-- Otros campos que siempre se muestran en una línea -->
    <div class="mb-3">
        <label class="form-label">Vehículo</label>
        <select @bind="servicio.IdVehiculo" class="form-select">
            <option value="0">--Seleccionar--</option> <!-- Opción por defecto -->
            @foreach (var vehiculo in vehiculos)
            {
                <option value="@vehiculo.IdVehiculo">@vehiculo.Placa</option>
            }
        </select>
    </div>

    <!-- Otros campos que siempre se muestran en una línea -->
    <div class="mb-3">
        <label class="form-label">Es Recurrente</label>
        <InputCheckbox @bind-Value="servicio.EsRecurrente" class="form-check-input" />
    </div>

    <!-- Otros campos que siempre se muestran en una línea -->
    <div class="mb-3">
        <label class="form-label">Precio Mano Obra</label>
        <InputNumber @bind-Value="servicio.PrecioManoObra" class="form-control" />
    </div>

    <!-- Otros campos que siempre se muestran en una línea -->
    <div class="mb-3 form-check">
        <label class="form-check-label">Confirmado</label>
        <InputCheckbox @bind-Value="servicio.Confirmado" class="form-check-input" />
    </div>

    <!-- Otros campos que siempre se muestran en una línea -->
    <div class="mb-3">
        <label class="form-label">Viáticos</label>
        <InputTextArea @bind-Value="servicio.Viaticos" class="form-control" />
    </div>

    <!-- Otros campos que siempre se muestran en una línea -->
    <div class="mb-3">
        <label class="form-label">Mano Obra Personal</label>
        <InputNumber @bind-Value="servicio.ManoObraPersonal" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
</EditForm>

@code {
    private ServicioModel servicio = new ServicioModel();

    private List<tbTipoServicios> tiposServicios;
    private List<tbTipoMantenimientos> tiposMantenimientos;
    private List<tbVehiculo> vehiculos;
    private List<tbUbicacionEnAutomovil> ubicacionesEnAutomovil;


    protected override void OnInitialized()
    {

        servicio.FechaServicio = DateTime.Now;
        tiposServicios = servicioServices.TipoServicios();
        tiposMantenimientos = servicioServices.TipoMantenimientos();
        vehiculos = servicioServices.Vehiculos();
        ubicacionesEnAutomovil = servicioServices.UbicacionesEnAutomovil();
    }

    private IBrowserFile? selectedImage;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedImage = e.File;
    }





    private async void HandleValidSubmit()
    {
        if (selectedImage != null)
        {
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, "img", "servicios", selectedImage.Name);

            // Crea la carpeta si no existe
            var directory = Path.GetDirectoryName(filePath);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await selectedImage.OpenReadStream().CopyToAsync(fileStream);
            }

            // Guarda la ruta relativa en el modelo
            servicio.Imagenes = Path.Combine("img", "servicios", selectedImage.Name);
        }
        bool result =  await servicioServices.InsertarUnServicios(servicio);
        if (result == false)
        {
            return;
        }
        // Lógica para manejar el formulario válido

        // Limpia el modelo asignando una nueva instancia
        servicio = new ServicioModel();
        servicio.FechaServicio = DateTime.Now;

    }


    private void CalcularCostoTotal()
    {
        servicio.CostoTotal = servicio.CantidadComprada * servicio.CostoUnitario;
    }


    private void OnTipoServicioChanged(ChangeEventArgs e)
    {
        int selectedId = int.Parse(e.Value.ToString());
        servicio.IdTipoServicio = selectedId;

        var selectedTipoServicio = tiposServicios.FirstOrDefault(ts => ts.IdTipoServicio == selectedId);
        if (selectedTipoServicio != null)
        {
            servicio.Titulo = selectedTipoServicio.Nombre;
        }
    }

}
