@page "/servicios"
@attribute [Authorize(Roles = "propietario")]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using PaseoExpressWebApp.Context;
@using PaseoExpressWebApp.Models;
@using PaseoExpressWebApp.Services;
@inject ServicioServices servicioServices
@inject IJSRuntime JsRuntime
@inject IWebHostEnvironment WebHostEnvironment
@inject VehiculoService Vehiculo


@using Microsoft.AspNetCore.SignalR.Client;

<PageTitle>Servicios</PageTitle>

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>

<MudCard>
    <MudCardContent>
    <EditForm Model="@servicio" >
        @*OnValidSubmit="HandleValidSubmit"*@
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Tipo Servicio</label>
                <select class="form-select" @onchange="OnTipoServicioChanged">
                    <option value="0">--Seleccionar--</option> <!-- Opción por defecto -->
                    @foreach (var tipoServicio in tiposServicios)
                    {
                        <option value="@tipoServicio.IdTipoServicio">@tipoServicio.Nombre</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Título</label>
                <InputText @bind-Value="servicio.Titulo" class="form-control" />
                </div>
        </div>
    </div>

    <div class="row">

        <div class="col-12 col-md-6">
            <!-- Otros campos para PC -->
            <div class="form-group">
                <label class="form-label">Descripción</label>
                <InputTextArea @bind-Value="servicio.Descripcion" class="form-control" />
            </div>
        </div>

        <div class="col-12 col-md-6">
            <!-- Otros campos para PC -->
            <div class="form-group">
                <label class="form-label">Fecha Servicio</label>
                <InputDate @bind-Value="servicio.FechaServicio" class="form-control" />
            </div>
        </div>
    </div>

    @*<div class="row">
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Cantidad Comprada</label>
                <InputNumber @bind-Value="servicio.CantidadComprada" class="form-control" @oninput="CalcularCostoTotal" @onblur="CalcularCostoTotal" />
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Costo Unitario</label>
                <InputNumber @bind-Value="servicio.CostoUnitario" class="form-control" @oninput="CalcularCostoTotal" @onblur="CalcularCostoTotal" />
            </div>
        </div>
    </div>
*@
  @*  <div class="row">
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Cantidad Comprada</label>
                <InputNumber @bind-Value="servicio.CantidadComprada" class="form-control" @oninput="CalcularCostoTotal" @onblur="CalcularCostoTotal" />
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Costo Unitario</label>
                <InputNumber @bind-Value="servicio.CostoUnitario" class="form-control" @oninput="CalcularCostoTotal" @onblur="CalcularCostoTotal" />
            </div>
        </div>
    </div>
*@
    <div class="row">
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Costo Total</label>
                <InputNumber @bind-Value="servicio.CostoTotal" class="form-control" Disabled="true" />
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Ubicación en Automóvil</label>
                <select @bind="servicio.IdUbicacionEnAutomovil" class="form-select">
                    <option value="0">--Seleccionar--</option> <!-- Opción por defecto -->
                    @foreach (var ubicacion in ubicacionesEnAutomovil)
                    {
                        <option value="@ubicacion.IdUbicacionEnAutomovil">@ubicacion.Ubicacion</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Tipo Mantenimiento</label>
                <select @bind="servicio.IdTipoMantenimiento" class="form-select">
                    <option value="0">--Seleccionar--</option> <!-- Opción por defecto -->
                    @foreach (var tipoMantenimiento in tiposMantenimientos)
                    {
                        <option value="@tipoMantenimiento.IdTipoMantenimiento">@tipoMantenimiento.Nombre</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Vehículo</label>
                <select @bind="servicio.IdVehiculo" class="form-select">
                    <option value="0">--Seleccionar--</option> <!-- Opción por defecto -->
                    @foreach (var vehiculo in vehiculos)
                    {
                        <option value="@vehiculo.IdVehiculo">@vehiculo.Placa</option>
                    }
                </select>
            </div>
        </div>
    </div>


    <div class="row">
        <div class="col-12 col-md-6">
            <div class="form-group">
                <input type="checkbox" @bind="isCheckboxChecked" />
                <label for="checkbox">Conductor actual</label>
                <div class="m-3">
                    @if (!isCheckboxChecked)
                    {
                        <div class="form-group">
                            <label class="form-label">Conductor</label>
                            <select @bind="servicio.IdUsuario" class="form-select">
                                <option value="0">--Seleccionar--</option>
                                @foreach (var conductor in Conductores)
                                {
                                    <option value="@conductor.IdUsuario">@conductor.Nombre</option>
                                }
                                }
                            </select>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Precio Mano Obra</label>
                <InputNumber @bind-Value="servicio.PrecioManoObra" class="form-control" />
            </div>
        </div>
    </div>

    
        
    <div class="row">
    <div class="col-12 col-md-6">
        <div class="form-group form-check">
            <InputCheckbox @bind-Value="servicio.Confirmado" class="form-check-input" />
            <label class="form-check-label">Confirmado</label>
        </div>
    </div>
    <div class="col-12 col-md-6">
        <div class="form-group">
            <label class="form-label">Viáticos</label>
            <InputTextArea @bind-Value="servicio.Viaticos" class="form-control" />
        </div>
    </div>
</div>





    <div class="row">
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Mano Obra Personal</label>
                <InputNumber @bind-Value="servicio.ManoObraPersonal" class="form-control" />
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Próxima Fecha Mantenimiento</label>
                <InputDate @bind-Value="servicio.ProximaFechaMantenimiento" class="form-control" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Imágenes</label>
                <InputFile OnChange="OnInputFileChange" class="form-control" />
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Marca</label>
                <InputText @bind-Value="servicio.Marca" class="form-control" />
            </div>
        </div>
    </div>

    <div class="row">
       @* <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Kilometraje Vehículo</label>
                <InputNumber @bind-Value="servicio.KilometrajeVehiculo" class="form-control" />
            </div>
        </div>*@
        <div class="col-12 col-md-6">
            <div class="form-group">
                <label class="form-label">Millaje Vehículo</label>
                <InputNumber @bind-Value="servicio.MillajeVehiculo" class="form-control" />
            </div>
        </div>
    </div>


        

    <button @onclick="EnviarSolicitudActualizarTransaccion" type="submit" class="btn btn-primary">Guardar</button>
</EditForm>

    </MudCardContent>


</MudCard>

@code {
    private ServicioModel servicio = new ServicioModel();

    private List<tbTipoServicios> tiposServicios;
    private List<tbTipoMantenimientos> tiposMantenimientos;
    private List<tbVehiculo> vehiculos;
    private List<tbUbicacionEnAutomovil> ubicacionesEnAutomovil;
    private List<tbUsuarios> Conductores;

    private bool isCheckboxChecked = true;
    private bool isDropdownVisible = false;
    private int? IdConductorCheckbox;


    private HubConnection? hubConnection;


    private async void MetodoSeleccionado()
    {
        servicio.IdUsuario = vehiculos.Where(x => x.IdVehiculo == servicio.IdVehiculo).FirstOrDefault().IdConductor;
        
        // Lógica para el método cuando el checkbox está seleccionado
        Console.WriteLine("Checkbox seleccionado. ID del vehículo: [tu ID de vehículo aquí]");
    }

    private void MetodoNoSeleccionado()
    {
         //vehiculos = Vehiculo.Obtenervehiculos();
        servicio.IdUsuario = servicio.IdVehiculo;
        // Lógica para el método cuando el checkbox no está seleccionado
        Console.WriteLine("Checkbox no seleccionado. ID del vehículo: [tu ID de vehículo aquí]");
    }

    protected override void OnInitialized()
    {
             hubConnection = new HubConnectionBuilder()
       .WithUrl(Navigation.ToAbsoluteUri("/YourHub"))
       .Build();

        servicio.FechaServicio = DateTime.Now;
        tiposServicios = servicioServices.TipoServicios();
        tiposMantenimientos = servicioServices.TipoMantenimientos();
        vehiculos = servicioServices.Vehiculos();
        ubicacionesEnAutomovil = servicioServices.UbicacionesEnAutomovil();

        Conductores = servicioServices.ObtenerUsuarios();
    }

    private IBrowserFile? selectedImage;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedImage = e.File;
    }

    //private async void HandleValidSubmit()

    private async Task EnviarSolicitudActualizarTransaccion()
    {
         
        //isDropdownVisible = isCheckboxChecked;

        if (isCheckboxChecked)
        {
            MetodoSeleccionado();
        }
        else
        {
            MetodoNoSeleccionado();
        }

        if (selectedImage != null)
        {
            var filePath = Path.Combine(WebHostEnvironment.WebRootPath, "img", "servicios", selectedImage.Name);

            // Crea la carpeta si no existe
            var directory = Path.GetDirectoryName(filePath);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await selectedImage.OpenReadStream().CopyToAsync(fileStream);
            }

            // Guarda la ruta relativa en el modelo
            servicio.Imagenes = Path.Combine("img", "servicios", selectedImage.Name);
        }
        bool result =  await servicioServices.InsertarUnServicios(servicio);
        if (result == false)
        {
            return;
        }

        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("ActualizarTransaccion");
        }
        else
        {
            Console.WriteLine($"La conexión no está establecida. Estado actual: {hubConnection?.State}");
        }
        // Lógica para manejar el formulario válido

        // Limpia el modelo asignando una nueva instancia
        servicio = new ServicioModel();
        servicio.FechaServicio = DateTime.Now;

    }


    private void CalcularCostoTotal()
    {
        servicio.CostoTotal = servicio.CantidadComprada * servicio.CostoUnitario;
    }


    private void OnTipoServicioChanged(ChangeEventArgs e)
    {
        int selectedId = int.Parse(e.Value.ToString());
        servicio.IdTipoServicio = selectedId;

        var selectedTipoServicio = tiposServicios.FirstOrDefault(ts => ts.IdTipoServicio == selectedId);
        if (selectedTipoServicio != null)
        {
            servicio.Titulo = selectedTipoServicio.Nombre;
        }
    }


    //private async Task EnviarSolicitudActualizarTransaccion()
    //{
    //    if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
    //    {
    //        await hubConnection.SendAsync("ActualizarTransaccion");
    //    }
    //    else
    //    {
    //        Console.WriteLine($"La conexión no está establecida. Estado actual: {hubConnection?.State}");
    //    }
    //}

     
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Servicios", href: null, disabled: true),
    };
}
